package com.mephi.ManagmentLocalServer.controller;

import com.mephi.ManagmentLocalServer.dto.note.NoteRequest;
import com.mephi.ManagmentLocalServer.dto.note.NoteResponse;
import com.mephi.ManagmentLocalServer.service.SecureNoteService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/notes")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "üìù Notes", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏")
@SecurityRequirement(name = "Bearer Authentication")
public class NoteController {

    private final SecureNoteService noteService;

    @GetMapping
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏",
        description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ).
            
            **–í–∞–∂–Ω–æ**: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class),
                examples = @ExampleObject(
                    name = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫",
                    value = """
                        [
                          {
                            "id": 1,
                            "encryptedTitle": "U2FsdGVkX1+encrypted_title",
                            "encryptedType": "U2FsdGVkX1+encrypted_type",
                            "encryptedData": "U2FsdGVkX1+encrypted_content",
                            "remoteId": "123e4567-e89b-12d3-a456-426614174000",
                            "createdAt": "2024-01-15T10:30:00Z",
                            "updatedAt": "2024-01-15T11:00:00Z",
                            "lastSyncAt": "2024-01-15T11:00:00Z"
                          }
                        ]
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<List<NoteResponse>> getAllNotes() {
        List<NoteResponse> notes = noteService.getAllNotes();
        return ResponseEntity.ok(notes);
    }

    @PostMapping
    @Operation(
        summary = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É",
        description = """
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É.
            
            **–í–∞–∂–Ω–æ**: –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201",
            description = "–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class)
            )
        ),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<NoteResponse> createNote(@Valid @RequestBody NoteRequest request) {
        NoteResponse note = noteService.createNote(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(note);
    }

    @PutMapping("/{id}")
    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        description = """
            –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É.
            
            **–í–∞–∂–Ω–æ**: 
            - –ó–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            - –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class)
            )
        ),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    })
    public ResponseEntity<NoteResponse> updateNote(
            @PathVariable Long id,
            @Valid @RequestBody NoteRequest request
    ) {
        NoteResponse note = noteService.updateNote(id, request);
        return ResponseEntity.ok(note);
    }

    @DeleteMapping("/{id}")
    @Operation(
        summary = "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        description = """
            –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID.
            
            **–í–∞–∂–Ω–æ**: –ó–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ",
                    value = """
                        {
                          "message": "Note deleted successfully",
                          "id": 1
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    })
    public ResponseEntity<Map<String, Object>> deleteNote(@PathVariable Long id) {
        noteService.deleteNote(id);
        return ResponseEntity.ok(Map.of(
            "message", "Note deleted successfully",
            "id", id
        ));
    }

    @GetMapping("/{id}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID",
        description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ –µ—ë ID.
            
            **–í–∞–∂–Ω–æ**: –ó–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class)
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    })
    public ResponseEntity<NoteResponse> getNoteById(@PathVariable Long id) {
        NoteResponse note = noteService.getNoteById(id);
        return ResponseEntity.ok(note);
    }
} 