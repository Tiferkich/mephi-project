package com.mephi.ManagmentLocalServer.controller;

import com.mephi.ManagmentLocalServer.dto.remote.RemoteJwtResponse;
import com.mephi.ManagmentLocalServer.dto.remote.RemoteAuthRequest;
import com.mephi.ManagmentLocalServer.service.RemoteAuthService;
import com.mephi.ManagmentLocalServer.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/remote")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "üåê Remote Auth", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º")
@SecurityRequirement(name = "Bearer Authentication")
public class RemoteAuthController {

    private final RemoteAuthService remoteAuthService;
    private final UserService userService;

    @PostMapping("/register")
    @Operation(
        summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ",
        description = """
            –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username, salt, passwordHash)
            2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å Argon2 —Ö–µ—à–µ–º
            3. –ü–æ–ª—É—á–∞–µ—Ç remoteId –∏ remoteToken
            4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
            **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
            - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ
            - –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω  
            - –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = RemoteJwtResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "type": "Bearer",
                          "userId": "123e4567-e89b-12d3-a456-426614174000",
                          "username": "john_doe"
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ"),
        @ApiResponse(responseCode = "400", description = "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "409", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
    })
    public ResponseEntity<RemoteJwtResponse> registerOnRemote() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if (userService.hasRemoteAccount()) {
                return ResponseEntity.badRequest().build();
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var user = userService.getCurrentUser();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            RemoteJwtResponse response = remoteAuthService.registerOnRemote(
                user.getUsername(), 
                user.getSalt(), 
                user.getPasswordHash()  // Argon2 —Ö–µ—à –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            userService.updateRemoteData(response.getUserId(), response.getToken());

            log.info("User {} successfully registered on remote server", user.getUsername());
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("Failed to register on remote server", e);
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/login")
    @Operation(
        summary = "–í—Ö–æ–¥ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ",
        description = """
            –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å Argon2 —Ö–µ—à–µ–º
            3. –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π remoteToken
            4. –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
            
            **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
            - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ remoteToken
            - –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = RemoteJwtResponse.class)
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"),
        @ApiResponse(responseCode = "400", description = "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    })
    public ResponseEntity<RemoteJwtResponse> loginOnRemote() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var user = userService.getCurrentUser();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            RemoteJwtResponse response = remoteAuthService.loginOnRemote(
                user.getUsername(), 
                user.getPasswordHash()  // Argon2 —Ö–µ—à –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
            userService.updateRemoteData(response.getUserId(), response.getToken());

            log.info("User {} successfully logged in on remote server", user.getUsername());
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("Failed to login on remote server", e);
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/disconnect")
    @Operation(
        summary = "–û—Ç–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
        description = """
            –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ.
            
            **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:**
            - –£–¥–∞–ª—è–µ—Ç remoteId –∏ remoteToken –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
            - –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            - –ù–ï —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            
            **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
            - –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            - –°–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ",
                    value = """
                        {
                          "success": true,
                          "message": "Remote account disconnected successfully"
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<Map<String, Object>> disconnectRemote() {
        try {
            // –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
            userService.clearRemoteData();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Remote account disconnected successfully"
            ));

        } catch (Exception e) {
            log.error("Failed to disconnect remote account", e);
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "Failed to disconnect: " + e.getMessage()
            ));
        }
    }

    @GetMapping("/status")
    @Operation(
        summary = "–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º.
            
            **–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:**
            - –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            - –ï—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            - –í–∞–ª–∏–¥–µ–Ω –ª–∏ remoteToken
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
                    value = """
                        {
                          "hasRemoteAccount": true,
                          "remoteServerAvailable": true,
                          "tokenValid": true,
                          "remoteUserId": "123e4567-e89b-12d3-a456-426614174000",
                          "canSync": true
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<Map<String, Object>> getRemoteStatus() {
        boolean hasRemoteAccount = userService.hasRemoteAccount();
        boolean serverAvailable = remoteAuthService.checkRemoteConnection();
        boolean tokenValid = false;
        
        if (hasRemoteAccount) {
            String remoteToken = userService.getRemoteToken();
            tokenValid = remoteAuthService.validateRemoteToken(remoteToken);
        }

        Map<String, Object> status = Map.of(
            "hasRemoteAccount", hasRemoteAccount,
            "remoteServerAvailable", serverAvailable,
            "tokenValid", tokenValid,
            "remoteUserId", userService.getRemoteId() != null ? userService.getRemoteId() : "",
            "canSync", hasRemoteAccount && serverAvailable && tokenValid
        );

        return ResponseEntity.ok(status);
    }
} 