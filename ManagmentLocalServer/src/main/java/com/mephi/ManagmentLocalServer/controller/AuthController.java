package com.mephi.ManagmentLocalServer.controller;

import com.mephi.ManagmentLocalServer.dto.auth.AuthResponse;
import com.mephi.ManagmentLocalServer.dto.auth.LoginRequest;
import com.mephi.ManagmentLocalServer.dto.auth.SetupRequest;
import com.mephi.ManagmentLocalServer.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "üîê Authentication", description = "–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
public class AuthController {

    private final UserService userService;

    @PostMapping("/setup")
    @Operation(
        summary = "–ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = """
            –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            - –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            - –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            **–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:**
            1. `masterPasswordHash = SHA256(masterPassword)`
            2. `salt = generateRandomSalt()`
            3. `passwordHash = Argon2(masterPasswordHash + salt)`
            4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å `{username, salt, passwordHash}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = AuthResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "username": "user",
                          "isSetup": true
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        )
    })
    public ResponseEntity<AuthResponse> setup(@Valid @RequestBody SetupRequest request) {
        log.info("Setup request for username: {}", request.getUsername());
        AuthResponse response = userService.setup(request);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/login")
    @Operation(
        summary = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
        description = """
            –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (/auth/setup)
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = AuthResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "username": "user",
                          "isSetup": true
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        )
    })
    public ResponseEntity<AuthResponse> login(@Valid @RequestBody LoginRequest request) {
        log.info("Login request received");
        AuthResponse response = userService.login(request);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/status")
    @Operation(
        summary = "–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        description = """
            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
            
            **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
            - `isSetup`: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            - `isAuthenticated`: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å Bearer —Ç–æ–∫–µ–Ω)
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = {
                    @ExampleObject(
                        name = "–ù–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                        value = """
                            {
                              "isSetup": true,
                              "isAuthenticated": true,
                              "username": "user"
                            }
                            """
                    ),
                    @ExampleObject(
                        name = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        value = """
                            {
                              "isSetup": false,
                              "isAuthenticated": false
                            }
                            """
                    )
                }
            )
        )
    })
    public ResponseEntity<Map<String, Object>> status(
            @RequestHeader(value = "Authorization", required = false) String authHeader
    ) {
        boolean isSetup = userService.isSetup();
        boolean isAuthenticated = authHeader != null && authHeader.startsWith("Bearer ");
        
        Map<String, Object> response = Map.of(
            "isSetup", isSetup,
            "isAuthenticated", isAuthenticated
        );
        
        if (isSetup && isAuthenticated) {
            try {
                String username = userService.getCurrentUser().getUsername();
                response = Map.of(
                    "isSetup", isSetup,
                    "isAuthenticated", isAuthenticated,
                    "username", username
                );
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }
        
        return ResponseEntity.ok(response);
    }
} 