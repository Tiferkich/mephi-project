package com.mephi.ManagmentLocalServer.controller;

import com.mephi.ManagmentLocalServer.dto.auth.AuthResponse;
import com.mephi.ManagmentLocalServer.dto.auth.LoginRequest;
import com.mephi.ManagmentLocalServer.dto.auth.SetupRequest;
import com.mephi.ManagmentLocalServer.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "üîê Authentication", description = "–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
public class AuthController {

    private final UserService userService;

    @PostMapping("/setup")
    @Operation(
        summary = "–ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = """
            –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            - –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            - –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            **–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:**
            1. `masterPasswordHash = SHA256(masterPassword)`
            2. `salt = generateRandomSalt()`
            3. `passwordHash = Argon2(masterPasswordHash + salt)`
            4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å `{username, salt, passwordHash}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = AuthResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "username": "user",
                          "isSetup": true
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        )
    })
    public ResponseEntity<AuthResponse> setup(@Valid @RequestBody SetupRequest request) {
        log.info("Setup request for username: {}", request.getUsername());
        AuthResponse response = userService.setup(request);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/login")
    @Operation(
        summary = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
        description = """
            –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (/auth/setup)
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = AuthResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "username": "user",
                          "isSetup": true
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        )
    })
    public ResponseEntity<AuthResponse> login(@Valid @RequestBody LoginRequest request) {
        log.info("Login request received");
        AuthResponse response = userService.login(request);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/status")
    @Operation(
        summary = "–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        description = """
            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
            
            **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
            - `isSetup`: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            - `isAuthenticated`: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å Bearer —Ç–æ–∫–µ–Ω)
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = {
                    @ExampleObject(
                        name = "–ù–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                        value = """
                            {
                              "isSetup": true,
                              "isAuthenticated": true,
                              "username": "user"
                            }
                            """
                    ),
                    @ExampleObject(
                        name = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        value = """
                            {
                              "isSetup": false,
                              "isAuthenticated": false
                            }
                            """
                    )
                }
            )
        )
    })
    public ResponseEntity<Map<String, Object>> status(
            @RequestHeader(value = "Authorization", required = false) String authHeader
    ) {
        boolean isSetup = userService.isSetup();
        boolean isAuthenticated = authHeader != null && authHeader.startsWith("Bearer ");
        
        Map<String, Object> response = Map.of(
            "isSetup", isSetup,
            "isAuthenticated", isAuthenticated
        );
        
        if (isSetup && isAuthenticated) {
            try {
                String username = userService.getCurrentUser().getUsername();
                response = Map.of(
                    "isSetup", isSetup,
                    "isAuthenticated", isAuthenticated,
                    "username", username
                );
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }
        
        return ResponseEntity.ok(response);
    }

    @GetMapping("/me")
    @Operation(
        summary = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
        description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
            
            **–¢—Ä–µ–±—É–µ—Ç**: Bearer —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                    value = """
                        {
                          "username": "user",
                          "userId": 1,
                          "isSetup": true
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        )
    })
    public ResponseEntity<Map<String, Object>> getCurrentUser() {
        try {
            var user = userService.getCurrentUser();
            Map<String, Object> response = Map.of(
                "username", user.getUsername(),
                "userId", user.getId(),
                "isSetup", true
            );
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(401).build();
        }
    }

    @PostMapping("/replace-account")
    @Operation(
        summary = "–ó–∞–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        description = """
            –ó–∞–º–µ–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            2. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä–æ–ª–∏ –∏ –∑–∞–º–µ—Ç–∫–∏
            4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            **–í–∞–∂–Ω–æ**: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è –∑–∞–º–µ–Ω–∞",
                    value = """
                        {
                          "success": true,
                          "message": "Account replaced successfully",
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "username": "recovered_user",
                          "passwordsImported": 5,
                          "notesImported": 3
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"
        )
    })
    public ResponseEntity<Map<String, Object>> replaceAccount(@RequestBody Map<String, Object> request) {
        log.info("Account replacement request received");
        
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            String username = (String) request.get("username");
            String email = (String) request.get("email");
            String masterPasswordHash = (String) request.get("masterPasswordHash");
            String salt = (String) request.get("salt");
            String remoteToken = (String) request.get("remoteToken");
            String remoteId = (String) request.get("remoteId");
            
            @SuppressWarnings("unchecked")
            List<Map<String, Object>> passwords = (List<Map<String, Object>>) request.get("passwords");
            
            @SuppressWarnings("unchecked")
            List<Map<String, Object>> notes = (List<Map<String, Object>>) request.get("notes");
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ UserService
            Map<String, Object> result = userService.replaceAccount(
                username, email, masterPasswordHash, salt, remoteToken, remoteId, passwords, notes
            );
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("Account replacement failed: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/connect-remote")
    @Operation(
        summary = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        description = """
            –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –û–±–Ω–æ–≤–ª—è–µ—Ç remoteId –∏ remoteToken –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (merge, –Ω–µ replace)
            3. –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏ JWT —Ç–æ–∫–µ–Ω –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
            **–û—Ç–ª–∏—á–∏–µ –æ—Ç replace-account**: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    value = """
                        {
                          "success": true,
                          "message": "Remote account connected successfully",
                          "token": "existing_jwt_token",
                          "username": "local_user",
                          "passwordsSynced": 5,
                          "notesSynced": 3
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        )
    })
    public ResponseEntity<Map<String, Object>> connectRemote(@RequestBody Map<String, Object> request) {
        log.info("Remote account connection request received");
        
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            String remoteToken = (String) request.get("remoteToken");
            String remoteId = (String) request.get("remoteId");
            
            @SuppressWarnings("unchecked")
            Map<String, Object> userData = (Map<String, Object>) request.get("userData");
            
            @SuppressWarnings("unchecked")
            List<Map<String, Object>> passwords = (List<Map<String, Object>>) request.get("passwords");
            
            @SuppressWarnings("unchecked")
            List<Map<String, Object>> notes = (List<Map<String, Object>>) request.get("notes");
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ UserService
            Map<String, Object> result = userService.connectRemoteAccount(
                remoteToken, remoteId, userData, passwords, notes
            );
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("Remote account connection failed: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/jwt-login")
    @Operation(
        summary = "–í—Ö–æ–¥ –ø–æ JWT —Ç–æ–∫–µ–Ω—É —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
        description = """
            –°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ JWT —Ç–æ–∫–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            2. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            3. –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
            
            **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
            - –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –Ω–∞ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å –æ–±–ª–∞—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
            - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π —Ç–æ–∫–µ–Ω
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                    value = """
                        {
                          "success": true,
                          "message": "JWT login successful",
                          "token": "local_jwt_token",
                          "username": "cloud_user",
                          "userId": "local_user_id"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º"
        ),
        @ApiResponse(
            responseCode = "401",
            description = "JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
        )
    })
    public ResponseEntity<Map<String, Object>> jwtLogin(@RequestBody Map<String, String> request) {
        log.info("JWT login request received");
        
        try {
            String jwtToken = request.get("jwtToken");
            if (jwtToken == null || jwtToken.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "JWT token is required"
                ));
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º RemoteAuthService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Map<String, Object> result = userService.loginWithJwtToken(jwtToken.trim());
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("JWT login failed: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/use-transfer")
    @Operation(
        summary = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ transfer —Ç–æ–∫–µ–Ω–∞",
        description = """
            –°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ transfer —Ç–æ–∫–µ–Ω–∞ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç transfer —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            2. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞—Ä–æ–ª–∏, –∑–∞–º–µ—Ç–∫–∏)
            3. –°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–º –∏–∑ –æ–±–ª–∞–∫–∞
            4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
            5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
            - Transfer —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç
            - –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π - –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
            - –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å",
                    value = """
                        {
                          "success": true,
                          "message": "Data transferred successfully",
                          "token": "local_jwt_token",
                          "username": "transferred_user",
                          "userId": "local_user_id",
                          "passwordsImported": 5,
                          "notesImported": 3
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–π transfer —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Transfer —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        )
    })
    public ResponseEntity<Map<String, Object>> useTransfer(@RequestBody Map<String, String> request) {
        log.info("Transfer token usage request received");
        
        try {
            String transferToken = request.get("transferToken");
            if (transferToken == null || transferToken.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Transfer token is required"
                ));
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º UserService –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ transfer —Ç–æ–∫–µ–Ω–∞
            Map<String, Object> result = userService.useTransferToken(transferToken.trim());
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("Transfer token usage failed: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/cloud-login")
    @Operation(
        summary = "–û–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email, username –∏ master password",
        description = """
            –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ email, username –∏ master password.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            2. –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç OTP –∫–æ–¥ –Ω–∞ email
            3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç sessionId –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP
            4. –¢—Ä–µ–±—É–µ—Ç –≤—ã–∑–æ–≤ /auth/verify-cloud-otp –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞
            
            **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
            - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
            - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ JWT —Ç–æ–∫–µ–Ω—É - –æ–±—ã—á–Ω—ã–π –ª–æ–≥–∏–Ω –≤ –æ–±–ª–∞–∫–æ
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    value = """
                        {
                          "requiresOTP": true,
                          "sessionId": "session_12345",
                          "username": "cloud_user",
                          "message": "OTP code sent to your email. Please verify to complete login."
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º"
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )
    })
    public ResponseEntity<Map<String, Object>> cloudLogin(@RequestBody Map<String, String> request) {
        log.info("Cloud login request received");
        
        try {
            String email = request.get("email");
            String username = request.get("username");
            String masterPassword = request.get("masterPassword");
            
            if (email == null || email.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Email is required"
                ));
            }
            
            if (username == null || username.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Username is required"
                ));
            }
            
            if (masterPassword == null || masterPassword.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Master password is required"
                ));
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º UserService –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            Map<String, Object> result = userService.cloudLogin(
                email.trim(), 
                username.trim(), 
                masterPassword
            );
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("Cloud login failed: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/verify-cloud-otp")
    @Operation(
        summary = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞",
        description = """
            –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é OTP –∫–æ–¥–∞.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç OTP –∫–æ–¥ —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            2. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–ª–∞–∫–∞
            3. –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª–∏ –∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ–±–ª–∞–∫–∞
            5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
            
            **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
            - –ù–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±–ª–∞–∫–∞ (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç)
            - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "OTP –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –æ–±–ª–∞—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
                    value = """
                        {
                          "success": true,
                          "message": "Cloud account successfully imported",
                          "token": "local_jwt_token",
                          "username": "cloud_user",
                          "userId": "local_user_id",
                          "passwordsImported": 5,
                          "notesImported": 3
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–π OTP –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
        ),
        @ApiResponse(
            responseCode = "401",
            description = "OTP –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
        )
    })
    public ResponseEntity<Map<String, Object>> verifyCloudOTP(@RequestBody Map<String, String> request) {
        log.info("Cloud OTP verification request received");
        
        try {
            String otpCode = request.get("otpCode");
            String username = request.get("username");
            
            if (otpCode == null || otpCode.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "OTP code is required"
                ));
            }
            
            if (username == null || username.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Username is required"
                ));
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º UserService –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP
            Map<String, Object> result = userService.verifyCloudOTP(
                otpCode.trim(), 
                username.trim()
            );
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("Cloud OTP verification failed: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }
}