package com.mephi.ManagmentLocalServer.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mephi.ManagmentLocalServer.service.RemoteProxyService;
import com.mephi.ManagmentLocalServer.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;

import jakarta.servlet.http.HttpServletRequest;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Map;

@RestController
@RequestMapping("/remote-proxy")
@RequiredArgsConstructor
public class RemoteProxyController {

    @Value("${remote.server.url:http://localhost:8080}")
    private String remoteServerUrl;
    
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final RemoteProxyService remoteProxyService;
    private final UserService userService;

    /**
     * –ü—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
     */
    @RequestMapping(value = "/**", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, RequestMethod.PATCH, RequestMethod.OPTIONS})
    public ResponseEntity<?> proxyToRemoteServer(
            HttpServletRequest request,
            @RequestBody(required = false) String body,
            @RequestHeader Map<String, String> headers) {
        
        long startTime = System.currentTimeMillis();
        String method = request.getMethod();
        String path = request.getRequestURI().substring("/remote-proxy".length());
        String userAgent = headers.getOrDefault("user-agent", "Unknown");
        
        System.out.println("üîÑ ========== PROXY REQUEST START ==========");
        System.out.println("üîÑ Method: " + method);
        System.out.println("üîÑ Path: " + path);
        System.out.println("üîÑ Full URI: " + request.getRequestURI());
        System.out.println("üîÑ Query String: " + request.getQueryString());
        System.out.println("üîÑ Body: " + (body != null ? body.substring(0, Math.min(body.length(), 200)) + "..." : "null"));
        
        // ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø SYNC-SETUP
        if (path.contains("sync-setup")) {
            System.out.println("üîÑ ======= SYNC-SETUP DETAILED LOGGING =======");
            System.out.println("üîÑ Full Request Body: " + (body != null ? body : "null"));
            if (body != null) {
                try {
                    JsonNode json = objectMapper.readTree(body);
                    System.out.println("üîÑ Parsed JSON:");
                    System.out.println("üîÑ   username: " + (json.has("username") ? json.get("username").asText() : "MISSING"));
                    System.out.println("üîÑ   email: " + (json.has("email") ? json.get("email").asText() : "MISSING"));
                    System.out.println("üîÑ   passwordHash: " + (json.has("passwordHash") ? (json.get("passwordHash").asText().isEmpty() ? "EMPTY" : "Present (" + json.get("passwordHash").asText().length() + " chars)") : "MISSING"));
                    System.out.println("üîÑ   salt: " + (json.has("salt") ? (json.get("salt").asText().isEmpty() ? "EMPTY" : "Present (" + json.get("salt").asText().length() + " chars)") : "MISSING"));
                    System.out.println("üîÑ   localUserId: " + (json.has("localUserId") ? (json.get("localUserId").asText().isEmpty() ? "EMPTY" : json.get("localUserId").asText()) : "MISSING"));
                } catch (Exception e) {
                    System.out.println("üîÑ Failed to parse JSON: " + e.getMessage());
                }
            }
            System.out.println("üîÑ =======================================");
        }
        
        // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê SYNC-SETUP
        if (path.equals("/auth/sync-setup") && "POST".equals(method) && body != null) {
            try {
                System.out.println("üîÑ üîß –î–û–ü–û–õ–ù–Ø–ï–ú –ó–ê–ü–†–û–° SYNC-SETUP üîß");
                
                // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
                String authHeader = headers.get("authorization");
                if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                    System.out.println("üîÑ ‚ùå –ù–µ—Ç JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞");
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                } else {
                    String jwtToken = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É
                    var currentUser = userService.getUserByJwtToken(jwtToken);
                    if (currentUser != null) {
                        System.out.println("üîÑ –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT: " + currentUser.getUsername() + ", ID: " + currentUser.getId());
                        
                        // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON
                        ObjectNode jsonNode = (ObjectNode) objectMapper.readTree(body);
                        
                        // –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
                        jsonNode.put("passwordHash", currentUser.getPasswordHash());
                        jsonNode.put("salt", currentUser.getSalt());
                        jsonNode.put("localUserId", currentUser.getId().toString());
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                        body = objectMapper.writeValueAsString(jsonNode);
                        
                        System.out.println("üîÑ ‚úÖ –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î:");
                        System.out.println("üîÑ   passwordHash: Present (" + currentUser.getPasswordHash().length() + " chars)");
                        System.out.println("üîÑ   salt: Present (" + currentUser.getSalt().length() + " chars)");
                        System.out.println("üîÑ   localUserId: " + currentUser.getId());
                        System.out.println("üîÑ üîß –ì–û–¢–û–í–û –ö –û–¢–ü–†–ê–í–ö–ï üîß");
                    } else {
                        System.out.println("üîÑ ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É");
                    }
                }
                
            } catch (Exception e) {
                System.out.println("üîÑ ‚ùå –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        remoteProxyService.logProxyRequest(method, path, userAgent);
        
        try {
            String targetUrl = remoteServerUrl + path;
            
            // –î–æ–±–∞–≤–ª—è–µ–º query parameters –µ—Å–ª–∏ –µ—Å—Ç—å
            String queryString = request.getQueryString();
            if (queryString != null) {
                targetUrl += "?" + queryString;
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders httpHeaders = new HttpHeaders();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            boolean isPublicEndpoint = path.startsWith("/auth/");
            boolean needsRemoteAuth = path.startsWith("/sync/") || path.startsWith("/api/");
            
            System.out.println("üîÑ Is Public Endpoint: " + isPublicEndpoint);
            System.out.println("üîÑ Needs Remote Auth: " + needsRemoteAuth);
            
            System.out.println("üîÑ Incoming Headers:");
            for (Map.Entry<String, String> header : headers.entrySet()) {
                System.out.println("üîÑ   " + header.getKey() + ": " + 
                    (header.getKey().toLowerCase().equals("authorization") ? "Bearer ****" : header.getValue()));
            }
            
            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ö–†–û–ú–ï Authorization –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
            for (Map.Entry<String, String> header : headers.entrySet()) {
                String headerName = header.getKey().toLowerCase();
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Authorization –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                if (headerName.equals("authorization") && isPublicEndpoint) {
                    System.out.println("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: " + path);
                    continue;
                }
                
                // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if (headerName.equals("authorization") || 
                    headerName.equals("content-type") || 
                    headerName.equals("accept") ||
                    headerName.equals("user-agent") ||
                    headerName.equals("accept-language") ||
                    headerName.equals("accept-encoding")) {
                    httpHeaders.set(header.getKey(), header.getValue());
                    System.out.println("üîÑ –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: " + header.getKey() + " = " + 
                        (headerName.equals("authorization") ? "Bearer ****" : header.getValue()));
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ X-Remote-Token –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            String remoteToken = headers.get("x-remote-token");
            if (remoteToken != null && !remoteToken.isEmpty() && needsRemoteAuth) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                httpHeaders.set("Authorization", "Bearer " + remoteToken);
                System.out.println("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: " + path);
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            HttpEntity<String> entity = new HttpEntity<>(body, httpHeaders);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP –º–µ—Ç–æ–¥
            HttpMethod httpMethod = HttpMethod.valueOf(method);
            
            System.out.println("üîÑ Final Headers to Remote Server:");
            for (String headerName : httpHeaders.keySet()) {
                System.out.println("üîÑ   " + headerName + ": " + 
                    (headerName.toLowerCase().equals("authorization") ? "Bearer ****" : httpHeaders.getFirst(headerName)));
            }
            
            System.out.println("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞: " + targetUrl);
            System.out.println("üîÑ –° –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: " + httpHeaders.keySet());
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            ResponseEntity<String> response = restTemplate.exchange(
                targetUrl, 
                httpMethod, 
                entity, 
                String.class
            );
            
            long duration = System.currentTimeMillis() - startTime;
            System.out.println("üîÑ Response Status: " + response.getStatusCode());
            System.out.println("üîÑ Response Body: " + (response.getBody() != null ? response.getBody().substring(0, Math.min(response.getBody().length(), 200)) + "..." : "null"));
            System.out.println("üîÑ Response Headers: " + response.getHeaders().keySet());
            System.out.println("üîÑ ========== PROXY REQUEST SUCCESS ==========");
            
            remoteProxyService.logProxyResponse(method, path, response.getStatusCode().value(), duration);
            
            // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í VERIFY-OTP
            if (path.equals("/auth/verify-otp") && "POST".equals(method) && response.getStatusCode().is2xxSuccessful()) {
                try {
                    System.out.println("üîÑ üîß –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –£–°–ü–ï–®–ù–£–Æ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Æ OTP üîß");
                    
                    String responseBody = response.getBody();
                    if (responseBody != null) {
                        JsonNode responseJson = objectMapper.readTree(responseBody);
                        
                        if (responseJson.has("token") && responseJson.has("userId")) {
                            String remoteAuthToken = responseJson.get("token").asText();
                            String remoteUserId = responseJson.get("userId").asText();
                            
                            System.out.println("üîÑ –ò–∑–≤–ª–µ–∫–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞:");
                            System.out.println("üîÑ   remoteToken: Present (" + remoteAuthToken.length() + " chars)");
                            System.out.println("üîÑ   remoteUserId: " + remoteUserId);
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
                            userService.updateRemoteData(remoteUserId, remoteAuthToken);
                            
                            System.out.println("üîÑ ‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î");
                        } else {
                            System.out.println("üîÑ ‚ÑπÔ∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç token/userId - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ");
                        }
                    }
                } catch (Exception e) {
                    System.out.println("üîÑ ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
                    e.printStackTrace();
                }
            }
            
            // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –û–¢–í–ï–¢ –£–î–ê–õ–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê –ö–ê–ö –ï–°–¢–¨ (CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–∂–µ –µ—Å—Ç—å)
            System.out.println("üîÑ ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –û–¢–í–ï–¢ –§–†–û–ù–¢–ï–ù–î–£:");
            System.out.println("üîÑ   Status: " + response.getStatusCode());
            System.out.println("üîÑ   Headers from remote: " + response.getHeaders().keySet());
            System.out.println("üîÑ   Body: " + (response.getBody() != null ? response.getBody().substring(0, Math.min(response.getBody().length(), 100)) + "..." : "null"));
            
            return response;
                
        } catch (HttpClientErrorException | HttpServerErrorException e) {
            long duration = System.currentTimeMillis() - startTime;
            String errorMsg = e.getStatusCode() + " - " + e.getResponseBodyAsString();
            System.out.println("üîÑ ========== PROXY REQUEST ERROR ==========");
            System.out.println("üîÑ Error Status: " + e.getStatusCode());
            System.out.println("üîÑ Error Body: " + e.getResponseBodyAsString());
            System.out.println("üîÑ ========== PROXY REQUEST ERROR END ==========");
            
            remoteProxyService.logProxyError(method, path, errorMsg);
            
            return ResponseEntity
                .status(e.getStatusCode())
                .body(e.getResponseBodyAsString());
                
        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            System.out.println("üîÑ ========== PROXY REQUEST EXCEPTION ==========");
            System.out.println("üîÑ Exception: " + e.getMessage());
            e.printStackTrace();
            System.out.println("üîÑ ========== PROXY REQUEST EXCEPTION END ==========");
            
            remoteProxyService.logProxyError(method, path, e.getMessage());
            
            return ResponseEntity
                .status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Collections.singletonMap("error", "Failed to connect to remote server: " + e.getMessage()));
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
     */
    @GetMapping("/health-check")
    public ResponseEntity<?> checkRemoteHealth() {
        try {
            ResponseEntity<String> response = restTemplate.getForEntity(
                remoteServerUrl + "/actuator/health", 
                String.class
            );
            
            return ResponseEntity.ok(Map.of(
                "remoteServerAvailable", true,
                "remoteServerUrl", remoteServerUrl,
                "status", response.getStatusCode()
            ));
            
        } catch (Exception e) {
            return ResponseEntity.ok(Map.of(
                "remoteServerAvailable", false,
                "remoteServerUrl", remoteServerUrl,
                "error", e.getMessage()
            ));
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏
     */
    @GetMapping("/stats")
    public ResponseEntity<?> getProxyStats() {
        return ResponseEntity.ok(remoteProxyService.getStats());
    }
} 