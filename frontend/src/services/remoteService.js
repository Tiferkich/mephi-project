/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
 */

const LOCAL_SERVER_URL = process.env.REACT_APP_LOCAL_SERVER_URL || 'http://localhost:3001';
const REMOTE_PROXY_URL = `${LOCAL_SERVER_URL}/remote-proxy`;

class RemoteService {
  constructor() {
    this.remoteToken = localStorage.getItem('remoteToken');
    this.remoteId = localStorage.getItem('remoteId');
  }

  // ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
  getLocalToken() {
    return localStorage.getItem('authToken');
  }

  // ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º
  getAuthHeaders() {
    const localToken = this.getLocalToken();
    const headers = {
      'Content-Type': 'application/json',
    };
    
    if (localToken) {
      headers['Authorization'] = `Bearer ${localToken}`;
      console.log('üîê –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å');
    } else {
      console.warn('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
    return headers;
  }

  // ‚úÖ –ù–û–í–û–ï: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å email –∏ OTP
  async setupSync(userData) {
    try {
      console.log('üîÑ Starting sync setup for:', userData.username, userData.email);
      
      const requestBody = JSON.stringify({
        username: userData.username,
        email: userData.email
        // passwordHash, salt, localUserId –¥–æ–±–∞–≤–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ë–î
      });
      
      console.log('üîÑ Request body:', requestBody);
      console.log('üîÑ Request URL:', `${REMOTE_PROXY_URL}/auth/sync-setup`);
      console.log('üîÑ Headers:', this.getAuthHeaders());
      
      const response = await fetch(`${REMOTE_PROXY_URL}/auth/sync-setup`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: requestBody
      });

      console.log('üîÑ Sync setup response status:', response.status);
      console.log('üîÑ Response headers:', Object.fromEntries(response.headers.entries()));
      console.log('üîÑ Response ok:', response.ok);
      
      if (!response.ok) {
        console.error('‚ùå Response not ok, status:', response.status);
        let errorText = '';
        try {
          const error = await response.json();
          errorText = error.message || 'Sync setup failed';
          console.error('‚ùå Error response body:', error);
        } catch (parseError) {
          console.error('‚ùå Failed to parse error response:', parseError);
          errorText = `HTTP ${response.status}: ${response.statusText}`;
        }
        throw new Error(errorText);
      }

      console.log('‚úÖ Response is ok, parsing JSON...');
      const result = await response.json();
      console.log('‚úÖ Sync setup success response:', result);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const finalResult = {
        success: result.success || true,
        message: result.message || 'OTP code sent to your email. Please verify to complete sync setup.',
        otpRequired: result.otpRequired || true,
        ...result // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      };
      
      console.log('‚úÖ Final result:', finalResult);
      return finalResult;
      
    } catch (error) {
      console.error('‚ùå Sync setup failed with error:', error);
      console.error('‚ùå Error type:', error.constructor.name);
      console.error('‚ùå Error message:', error.message);
      console.error('‚ùå Error stack:', error.stack);
      
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –ù–û–í–û–ï: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∫–æ–¥–∞
  async verifyOtp(username, otpCode, otpType) {
    try {
      const response = await fetch(`${REMOTE_PROXY_URL}/auth/verify-otp`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          username,
          otpCode,
          otpType
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'OTP verification failed');
      }

      const result = await response.json();
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
      if (otpType === 'SYNC_SETUP' && result.token) {
        this.remoteToken = result.token;
        this.remoteId = result.userId;
        localStorage.setItem('remoteToken', this.remoteToken);
        localStorage.setItem('remoteId', this.remoteId);
      }

      return {
        success: true,
        message: result.message,
        token: result.token,
        userId: result.userId
      };
    } catch (error) {
      console.error('‚ùå OTP verification failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
  async createTransferToken(username, passwordHash) {
    try {
      const response = await fetch(`${REMOTE_PROXY_URL}/auth/create-transfer-token`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          username,
          passwordHash,
          deviceInfo: navigator.userAgent,
          ipAddress: 'auto' // –°–µ—Ä–≤–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏—Ç IP
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Transfer token creation failed');
      }

      const result = await response.json();
      
      return {
        success: true,
        transferToken: result.transferToken,
        expiresAt: result.expiresAt,
        message: 'Transfer token created successfully! You can now use this token on another device.'
      };
    } catch (error) {
      console.error('‚ùå Transfer token creation failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
  async useTransferToken(transferToken) {
    try {
      const response = await fetch(`${REMOTE_PROXY_URL}/auth/use-transfer-token`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          transferToken,
          deviceInfo: navigator.userAgent,
          ipAddress: 'auto' // –°–µ—Ä–≤–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏—Ç IP
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Transfer token usage failed');
      }

      const result = await response.json();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
      this.remoteToken = result.token;
      this.remoteId = result.userId;
      localStorage.setItem('remoteToken', this.remoteToken);
      localStorage.setItem('remoteId', this.remoteId);

      return {
        success: true,
        message: 'Data transferred successfully!',
        userData: result.userData,
        passwords: result.passwords || [],
        notes: result.notes || []
      };
    } catch (error) {
      console.error('‚ùå Transfer token usage failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  async registerRemoteUser(userData) {
    try {
      const response = await fetch(`${REMOTE_PROXY_URL}/auth/register`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          username: userData.username,
          passwordHash: userData.passwordHash,
          salt: userData.salt,
          localUserId: userData.localUserId
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Remote registration failed');
      }

      const result = await response.json();
      
      return {
        success: true,
        message: 'Registration successful! Check your email for verification.',
        otpRequired: true,
        username: userData.username
      };
    } catch (error) {
      console.error('‚ùå Remote registration failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  async loginRemoteUser(credentials) {
    try {
      const response = await fetch(`${REMOTE_PROXY_URL}/auth/login`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          username: credentials.username,
          passwordHash: credentials.passwordHash
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Remote login failed');
      }

      const result = await response.json();
      
      this.remoteToken = result.token;
      this.remoteId = result.userId;
      localStorage.setItem('remoteToken', this.remoteToken);
      localStorage.setItem('remoteId', this.remoteId);

      return {
        success: true,
        remoteId: this.remoteId,
        remoteToken: this.remoteToken,
        userData: result.userData
      };
    } catch (error) {
      console.error('‚ùå Remote login failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  async syncPasswordsToRemote(passwords) {
    if (!this.remoteToken) {
      throw new Error('Not authenticated with remote server');
    }

    try {
      const headers = this.getAuthHeaders();
      // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
      // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ getAuthHeaders()
      
      const response = await fetch(`${REMOTE_PROXY_URL}/sync/passwords`, {
        method: 'POST',
        headers: {
          ...headers,
          'X-Remote-Token': this.remoteToken // –ü–µ—Ä–µ–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
        },
        body: JSON.stringify({ passwords })
      });

      if (!response.ok) {
        throw new Error('Failed to sync passwords to remote server');
      }

      return await response.json();
    } catch (error) {
      console.error('‚ùå Password sync failed:', error);
      throw error;
    }
  }

  // ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  async syncNotesToRemote(notes) {
    if (!this.remoteToken) {
      throw new Error('Not authenticated with remote server');
    }

    try {
      const headers = this.getAuthHeaders();
      
      const response = await fetch(`${REMOTE_PROXY_URL}/sync/notes`, {
        method: 'POST',
        headers: {
          ...headers,
          'X-Remote-Token': this.remoteToken // –ü–µ—Ä–µ–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
        },
        body: JSON.stringify({ notes })
      });

      if (!response.ok) {
        throw new Error('Failed to sync notes to remote server');
      }

      return await response.json();
    } catch (error) {
      console.error('‚ùå Notes sync failed:', error);
      throw error;
    }
  }

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  async pullDataFromRemote() {
    if (!this.remoteToken) {
      throw new Error('Not authenticated with remote server');
    }

    try {
      const headers = this.getAuthHeaders();
      headers['X-Remote-Token'] = this.remoteToken;
      
      const [passwordsResponse, notesResponse] = await Promise.all([
        fetch(`${REMOTE_PROXY_URL}/sync/passwords`, {
          headers: headers
        }),
        fetch(`${REMOTE_PROXY_URL}/sync/notes`, {
          headers: headers
        })
      ]);

      if (!passwordsResponse.ok || !notesResponse.ok) {
        throw new Error('Failed to fetch data from remote server');
      }

      const passwords = await passwordsResponse.json();
      const notes = await notesResponse.json();

      return {
        success: true,
        passwords: passwords.data || [],
        notes: notes.data || []
      };
    } catch (error) {
      console.error('‚ùå Pull data failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
  async checkRemoteConnection() {
    try {
      const response = await fetch(`${REMOTE_PROXY_URL}/health-check`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
        timeout: 5000
      });

      if (!response.ok) {
        return {
          connected: false,
          error: 'Health check failed'
        };
      }

      const result = await response.json();
      return {
        connected: result.remoteServerAvailable,
        status: result.status || 'unknown'
      };
    } catch (error) {
      return {
        connected: false,
        error: error.message
      };
    }
  }

  // ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  logout() {
    this.remoteToken = null;
    this.remoteId = null;
    localStorage.removeItem('remoteToken');
    localStorage.removeItem('remoteId');
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  isRemoteAuthenticated() {
    return Boolean(this.remoteToken && this.remoteId);
  }
}

export const remoteService = new RemoteService(); 