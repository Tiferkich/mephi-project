const crypto = require('crypto');

class CryptoManager {
  constructor() {
    this.masterKey = null;
    this.isUnlocked = false;
    this.algorithm = 'aes-256-cbc';
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞ –¢–û–õ–¨–ö–û –≤ main –ø—Ä–æ—Ü–µ—Å—Å–µ
  async setMasterPassword(password, salt) {
    try {
      // –î–µ—Ä–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –≤ main –ø—Ä–æ—Ü–µ—Å—Å–µ
      this.masterKey = await this.deriveKey(password, salt);
      this.isUnlocked = true;
      
      // –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–∞–º—è—Ç–∏
      password = null;
      
      console.log('‚úÖ Master key set successfully in main process');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Failed to set master password:', error);
      return { success: false, error: error.message };
    }
  }

  // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –≤ main –ø—Ä–æ—Ü–µ—Å—Å–µ
  async encryptData(data) {
    if (!this.isUnlocked || !this.masterKey) {
      throw new Error('Vault is locked');
    }

    try {
      const iv = crypto.randomBytes(16);
      const cipher = crypto.createCipheriv(this.algorithm, this.masterKey, iv);
      
      let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');
      encrypted += cipher.final('hex');
      
      console.log('‚úÖ Data encrypted successfully in main process');
      return {
        data: encrypted,
        iv: iv.toString('hex'),
        version: 2 // –ú–∞—Ä–∫–µ—Ä –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
      };
    } catch (error) {
      console.error('‚ùå Encryption failed:', error);
      throw new Error(`Encryption failed: ${error.message}`);
    }
  }

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –≤ main –ø—Ä–æ—Ü–µ—Å—Å–µ
  async decryptData(encryptedData) {
    if (!this.isUnlocked || !this.masterKey) {
      throw new Error('Vault is locked');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–≤—ã–π –∏–ª–∏ —Å—Ç–∞—Ä—ã–π)
      if (encryptedData.version === 2 && encryptedData.iv) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å IV
        const iv = Buffer.from(encryptedData.iv, 'hex');
        const decipher = crypto.createDecipheriv(this.algorithm, this.masterKey, iv);
        
        let decrypted = decipher.update(encryptedData.data, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        
        const result = JSON.parse(decrypted);
        console.log('‚úÖ Data decrypted successfully (new format)');
        return result;
      } else if (typeof encryptedData === 'string' || (!encryptedData.version && !encryptedData.iv)) {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ IV (legacy support)
        console.log('üîÑ Attempting to decrypt legacy data format');
        
        // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
          const dataString = typeof encryptedData === 'string' ? encryptedData : encryptedData.data;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          const crypto = require('crypto');
          const decipher = crypto.createDecipher('aes-256-cbc', this.masterKey);
          
          let decrypted = decipher.update(dataString, 'hex', 'utf8');
          decrypted += decipher.final('utf8');
          
          const result = JSON.parse(decrypted);
          console.log('‚úÖ Legacy data decrypted successfully');
          return result;
        } catch (legacyError) {
          console.error('‚ùå Legacy decryption failed:', legacyError);
          throw new Error('Failed to decrypt legacy data format');
        }
      } else {
        throw new Error('Invalid encrypted data format');
      }
    } catch (error) {
      console.error('‚ùå Decryption failed:', error);
      throw new Error(`Failed to decrypt data: ${error.message}`);
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
  lock() {
    this.masterKey = null;
    this.isUnlocked = false;
    
    console.log('üîí Vault locked, keys cleared from memory');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    if (global.gc) {
      global.gc();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  isVaultUnlocked() {
    return this.isUnlocked && this.masterKey !== null;
  }

  async deriveKey(password, salt) {
    return new Promise((resolve, reject) => {
      crypto.pbkdf2(password, salt, 100000, 32, 'sha256', (err, derivedKey) => {
        if (err) {
          console.error('‚ùå Key derivation failed:', err);
          reject(err);
        } else {
          console.log('‚úÖ Key derived successfully');
          resolve(derivedKey);
        }
      });
    });
  }
}

module.exports = CryptoManager; 