#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è ManagementServer
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [staging|production]

set -e

ENVIRONMENT=${1:-staging}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
    error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: staging –∏–ª–∏ production"
fi

log "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENVIRONMENT"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_FILE="$PROJECT_DIR/.env.$ENVIRONMENT"
if [[ -f "$ENV_FILE" ]]; then
    log "–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ $ENV_FILE"
    source "$ENV_FILE"
else
    warn "–§–∞–π–ª $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars=("DOCKER_IMAGE_NAME" "DEPLOY_HOST" "DEPLOY_USER")
for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
done

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ Git
if [[ -n "$CI_COMMIT_SHORT_SHA" ]]; then
    VERSION="$CI_COMMIT_SHORT_SHA"
else
    VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "latest")
fi

IMAGE_TAG="${DOCKER_IMAGE_NAME}:${VERSION}"
log "–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–∑: $IMAGE_TAG"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
remote_exec() {
    ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_HOST" "$1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ $DEPLOY_HOST"
if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_HOST" "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'"; then
    error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $DEPLOY_HOST"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
CONTAINER_NAME="managementserver-$ENVIRONMENT"
BACKUP_NAME="managementserver-$ENVIRONMENT-backup-$(date +%Y%m%d-%H%M%S)"

log "–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
remote_exec "
    if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
        docker commit $CONTAINER_NAME $BACKUP_NAME
        echo '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_NAME'
    else
        echo '–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
    fi
"

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
log "–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑ Docker"
remote_exec "docker pull $IMAGE_TAG"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
remote_exec "
    docker stop $CONTAINER_NAME 2>/dev/null || echo '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    docker rm $CONTAINER_NAME 2>/dev/null || echo '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —É–¥–∞–ª–µ–Ω'
"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [[ "$ENVIRONMENT" == "production" ]]; then
    PORT_MAPPING="80:8080"
    SPRING_PROFILE="production"
else
    PORT_MAPPING="8080:8080"
    SPRING_PROFILE="staging"
fi

# –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
log "–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
remote_exec "
    docker run -d \
        --name $CONTAINER_NAME \
        --restart unless-stopped \
        -p $PORT_MAPPING \
        -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILE \
        -e SPRING_DATASOURCE_URL=\${${ENVIRONMENT^^}_DB_URL} \
        -e SPRING_DATASOURCE_USERNAME=\${${ENVIRONMENT^^}_DB_USER} \
        -e SPRING_DATASOURCE_PASSWORD=\${${ENVIRONMENT^^}_DB_PASSWORD} \
        -e JWT_SECRET=\${${ENVIRONMENT^^}_JWT_SECRET} \
        -e TZ=Europe/Minsk \
        --health-cmd='curl -f http://localhost:8080/actuator/health || exit 1' \
        --health-interval=30s \
        --health-timeout=10s \
        --health-retries=3 \
        $IMAGE_TAG
"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
HEALTH_CHECK_URL="http://$DEPLOY_HOST"
if [[ "$ENVIRONMENT" == "staging" ]]; then
    HEALTH_CHECK_URL="$HEALTH_CHECK_URL:8080"
fi
HEALTH_CHECK_URL="$HEALTH_CHECK_URL/actuator/health"

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sleep 30

for i in {1..10}; do
    log "–ü–æ–ø—ã—Ç–∫–∞ $i/10: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    if curl -f -s "$HEALTH_CHECK_URL" > /dev/null; then
        log "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
        break
    fi
    
    if [[ $i -eq 10 ]]; then
        error "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫. –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
        
        # –û—Ç–∫–∞—Ç –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        log "–í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        remote_exec "
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            if docker images -q $BACKUP_NAME | grep -q .; then
                docker run -d \
                    --name $CONTAINER_NAME \
                    --restart unless-stopped \
                    -p $PORT_MAPPING \
                    $BACKUP_NAME
                echo '–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
            else
                echo '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            fi
        "
        exit 1
    fi
    
    sleep 10
done

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
remote_exec "
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
    docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}' | \
    grep 'managementserver-$ENVIRONMENT-backup' | \
    tail -n +4 | \
    awk '{print \$2}' | \
    xargs -r docker rmi || true
    
    # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
    docker image prune -f || true
"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
log "–°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è:"
remote_exec "
    echo '=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ==='
    docker ps --filter name=$CONTAINER_NAME --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
    
    echo '=== –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫) ==='
    docker logs --tail 10 $CONTAINER_NAME
"

log "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
log "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: $HEALTH_CHECK_URL"

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
    curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"‚úÖ ManagementServer —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ $ENVIRONMENT\n–í–µ—Ä—Å–∏—è: $VERSION\nURL: $HEALTH_CHECK_URL\"}" \
        "$SLACK_WEBHOOK_URL" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack"
fi 