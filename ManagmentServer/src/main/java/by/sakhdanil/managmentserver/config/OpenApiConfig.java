package by.sakhdanil.managmentserver.config;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.annotations.servers.Server;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.examples.Example;
import io.swagger.v3.oas.models.media.Content;
import io.swagger.v3.oas.models.media.MediaType;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.responses.ApiResponse;
import io.swagger.v3.oas.models.responses.ApiResponses;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@OpenAPIDefinition(
    info = @Info(
        title = "Management Server API",
        version = "1.0.0",
        description = """
            # Management Server API
            
            –°–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. 
            –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
            
            ## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            - üîê **–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ**: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            - üîë **JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–æ–≤
            - üõ°Ô∏è **Argon2 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Argon2 –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
            - üö´ **–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è**: –°–µ—Ä–≤–µ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
            
            ## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            1. **–ö–ª–∏–µ–Ω—Ç** —Ö–µ—à–∏—Ä—É–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å (SHA-256)
            2. –î–æ–±–∞–≤–ª—è–µ—Ç **—Å–æ–ª—å** –∏ —Ö–µ—à–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –ø–æ–º–æ—â—å—é **Argon2**
            3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            4. –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **JWT —Ç–æ–∫–µ–Ω** –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            5. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ **—à–∏—Ñ—Ä—É—é—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ** –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            
            ## –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            
            –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
            1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            2. –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω
            3. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫: `Authorization: Bearer <token>`
            """,
        contact = @Contact(
            name = "API Support",
            email = "support@managementserver.com"
        ),
        license = @License(
            name = "MIT License",
            url = "https://opensource.org/licenses/MIT"
        )
    ),
    servers = {
        @Server(url = "http://localhost:8080", description = "Development server"),
        @Server(url = "https://api.managementserver.com", description = "Production server")
    }
)
@SecurityScheme(
    name = "Bearer Authentication",
    type = SecuritySchemeType.HTTP,
    bearerFormat = "JWT",
    scheme = "bearer",
    description = "JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /api/auth/login –∏–ª–∏ /api/auth/register"
)
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
            .components(new Components()
                .addResponses("BadRequest", createErrorResponse(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                    "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
                    """
                    {
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "status": 400,
                      "error": "Bad Request",
                      "message": "Validation failed",
                      "path": "/api/auth/register"
                    }
                    """
                ))
                .addResponses("Unauthorized", createErrorResponse(
                    "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω",
                    """
                    {
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "status": 401,
                      "error": "Unauthorized",
                      "message": "JWT token is missing or invalid",
                      "path": "/api/notes"
                    }
                    """
                ))
                .addResponses("Forbidden", createErrorResponse(
                    "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    """
                    {
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "status": 403,
                      "error": "Forbidden",
                      "message": "Access denied",
                      "path": "/api/notes/123"
                    }
                    """
                ))
                .addResponses("NotFound", createErrorResponse(
                    "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    """
                    {
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "status": 404,
                      "error": "Not Found",
                      "message": "Note not found",
                      "path": "/api/notes/999"
                    }
                    """
                ))
                .addResponses("Conflict", createErrorResponse(
                    "–ö–æ–Ω—Ñ–ª–∏–∫—Ç",
                    "–†–µ—Å—É—Ä—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                    """
                    {
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "status": 409,
                      "error": "Conflict",
                      "message": "Username already exists",
                      "path": "/api/auth/register"
                    }
                    """
                ))
                .addResponses("InternalServerError", createErrorResponse(
                    "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                    """
                    {
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "status": 500,
                      "error": "Internal Server Error",
                      "message": "An unexpected error occurred",
                      "path": "/api/notes"
                    }
                    """
                ))
                
                // –ü—Ä–∏–º–µ—Ä—ã —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö
                .addSchemas("RegisterRequestExample", new Schema<>()
                    .type("object")
                    .description("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                    .example("""
                        {
                          "username": "john_doe",
                          "salt": "random_salt_generated_by_client",
                          "passwordHash": "argon2_hash_of_sha256_password_plus_salt"
                        }
                        """))
                
                .addSchemas("LoginRequestExample", new Schema<>()
                    .type("object")
                    .description("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤—Ö–æ–¥–∞")
                    .example("""
                        {
                          "username": "john_doe",
                          "passwordHash": "argon2_hash_of_sha256_password_plus_salt"
                        }
                        """))
                
                .addSchemas("NoteRequestExample", new Schema<>()
                    .type("object")
                    .description("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
                    .example("""
                        {
                          "encryptedData": "AES_encrypted_note_content_by_client"
                        }
                        """))
                
                .addSchemas("PasswordRequestExample", new Schema<>()
                    .type("object")
                    .description("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è")
                    .example("""
                        {
                          "encryptedData": "AES_encrypted_password_data_by_client"
                        }
                        """))
            );
    }
    
    private ApiResponse createErrorResponse(String summary, String description, String example) {
        return new ApiResponse()
            .description(description)
            .content(new Content()
                .addMediaType("application/json", new MediaType()
                    .schema(new Schema<>()
                        .type("object")
                        .addProperty("timestamp", new Schema<>().type("string").format("date-time"))
                        .addProperty("status", new Schema<>().type("integer"))
                        .addProperty("error", new Schema<>().type("string"))
                        .addProperty("message", new Schema<>().type("string"))
                        .addProperty("path", new Schema<>().type("string"))
                    )
                    .example(example)
                )
            );
    }
} 