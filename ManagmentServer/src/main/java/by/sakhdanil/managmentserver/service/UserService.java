package by.sakhdanil.managmentserver.service;

import by.sakhdanil.managmentserver.dto.auth.*;
import by.sakhdanil.managmentserver.dto.user.JwtResponse;
import by.sakhdanil.managmentserver.dto.user.LoginRequest;
import by.sakhdanil.managmentserver.dto.user.RegisterRequest;
import by.sakhdanil.managmentserver.entity.PasswordEntry;
import by.sakhdanil.managmentserver.entity.SecureNote;
import by.sakhdanil.managmentserver.entity.User;
import by.sakhdanil.managmentserver.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class UserService implements UserDetailsService {
    
    private final UserRepository userRepository;
    private final JwtService jwtService;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return userRepository.findByUsername(username)
            .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));
    }
    
    public JwtResponse register(RegisterRequest request) {
        if (userRepository.existsByUsername(request.username())) {
            throw new RuntimeException("Username already exists");
        }
        
        User user = new User();
        user.setUsername(request.username());
        user.setSalt(request.salt());
        user.setPasswordHash(request.passwordHash());
        
        User savedUser = userRepository.save(user);
        String token = jwtService.generateToken(savedUser);
        
        return new JwtResponse(token, savedUser.getId(), savedUser.getUsername());
    }
    
    public JwtResponse login(LoginRequest request) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = userRepository.findByUsername(request.username())
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é (–æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã)
        if (!user.getPasswordHash().equals(request.passwordHash())) {
            throw new RuntimeException("Invalid credentials");
        }
        
        String token = jwtService.generateToken(user);
        return new JwtResponse(token, user.getId(), user.getUsername());
    }

    // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø

    public Map<String, Object> setupSync(SyncSetupRequest request) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ localUserId
            Optional<User> existingUser = userRepository.findByUsername(request.getUsername());
            if (existingUser.isEmpty() && request.getLocalUserId() != null) {
                existingUser = userRepository.findByLocalUserId(request.getLocalUserId());
            }
            
            if (existingUser.isPresent()) {
                User user = existingUser.get();
                if (user.isEmailVerified()) {
                    return Map.of(
                        "success", false,
                        "error", "Cloud sync already set up for this account. Your account is already connected to cloud sync."
                    );
                } else {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP
                    String otpCode = emailService.generateOtpCode();
                    user.setOtp(otpCode, "SYNC_SETUP", 10); // 10 –º–∏–Ω—É—Ç
                    userRepository.save(user);
                    
                    emailService.sendSyncSetupOtp(user.getEmail(), user.getUsername(), otpCode);
                    
                    log.info("üîÑ Resending OTP for unverified user: {}", request.getUsername());
                    
                    return Map.of(
                        "success", true,
                        "message", "OTP code sent to your email. Please verify to complete sync setup.",
                        "otpRequired", true
                    );
                }
            }
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email —É–∂–µ –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —Ç–∞–∫–∏–º –∂–µ username
            Optional<User> emailUserWithSameUsername = userRepository.findByUsernameAndEmail(request.getUsername(), request.getEmail());
            if (emailUserWithSameUsername.isPresent() && emailUserWithSameUsername.get().isEmailVerified()) {
                return Map.of(
                    "success", false,
                    "error", "This email is already verified for user '" + request.getUsername() + "'. Please use account recovery instead."
                );
            }
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ email –¥–ª—è —Ä–∞–∑–Ω—ã—Ö username, 
            // –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            Optional<User> existingEmailUser = userRepository.findByEmail(request.getEmail());
            if (existingEmailUser.isPresent() && 
                existingEmailUser.get().isEmailVerified() && 
                !existingEmailUser.get().getUsername().equals(request.getUsername())) {
                
                log.warn("‚ö†Ô∏è Email {} already used by verified user '{}', but allowing registration for user '{}'", 
                    request.getEmail(), existingEmailUser.get().getUsername(), request.getUsername());
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = new User();
            user.setUsername(request.getUsername());
            user.setEmail(request.getEmail());
            user.setSalt(request.getSalt());
            user.setPasswordHash(request.getPasswordHash());
            user.setLocalUserId(request.getLocalUserId());
            user.setEmailVerified(false);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OTP –∫–æ–¥
            String otpCode = emailService.generateOtpCode();
            user.setOtp(otpCode, "SYNC_SETUP", 10); // 10 –º–∏–Ω—É—Ç
            
            userRepository.save(user);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP –Ω–∞ email
            emailService.sendSyncSetupOtp(request.getEmail(), request.getUsername(), otpCode);
            
            log.info("‚úÖ Sync setup initiated for new user: {}", request.getUsername());
            
            Map<String, Object> response = Map.of(
                "success", true,
                "message", "OTP code sent to your email. Please verify to complete sync setup.",
                "otpRequired", true
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if (existingEmailUser.isPresent() && existingEmailUser.get().isEmailVerified()) {
                return Map.of(
                    "success", true,
                    "message", "OTP code sent to your email. Please verify to complete sync setup.",
                    "otpRequired", true,
                    "warning", "This email is already used by another account. During account recovery, you'll need to specify both username and email."
                );
            }
            
            return response;
            
        } catch (Exception e) {
            log.error("‚ùå Sync setup failed: {}", e.getMessage());
            return Map.of(
                "success", false,
                "error", e.getMessage()
            );
        }
    }

    public Map<String, Object> verifyOtp(OtpVerificationRequest request) {
        try {
            User user = userRepository.findByUsername(request.getUsername())
                .orElseThrow(() -> new RuntimeException("User not found"));
            
            if (!user.isOtpValid(request.getOtpCode(), request.getOtpType())) {
                throw new RuntimeException("Invalid or expired OTP code");
            }
            
            // –û—á–∏—â–∞–µ–º OTP –∫–æ–¥
            user.clearOtp();
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if ("SYNC_SETUP".equals(request.getOtpType())) {
                user.setEmailVerified(true);
                userRepository.save(user);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
                String token = jwtService.generateToken(user);
                
                log.info("‚úÖ Sync setup completed for user: {}", request.getUsername());
                
                return Map.of(
                    "success", true,
                    "message", "Sync setup completed successfully!",
                    "token", token,
                    "userId", user.getId()
                );
            }
            
            userRepository.save(user);
            
            return Map.of(
                "success", true,
                "message", "OTP verified successfully"
            );
            
        } catch (Exception e) {
            log.error("‚ùå OTP verification failed: {}", e.getMessage());
            return Map.of(
                "success", false,
                "error", e.getMessage()
            );
        }
    }

    public Map<String, Object> initiateAccountRecovery(String username, String email) {
        try {
            User user = userRepository.findByUsernameAndEmail(username, email)
                .orElseThrow(() -> new RuntimeException("User not found with provided username and email"));
            
            if (!user.isEmailVerified()) {
                throw new RuntimeException("Account not verified. Please complete sync setup first.");
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OTP –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            String otpCode = emailService.generateOtpCode();
            user.setOtp(otpCode, "ACCOUNT_RECOVERY", 10); // 10 –º–∏–Ω—É—Ç
            
            userRepository.save(user);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP –Ω–∞ email
            emailService.sendAccountRecoveryOtp(email, username, otpCode);
            
            log.info("‚úÖ Account recovery initiated for user: {}", username);
            
            return Map.of(
                "success", true,
                "message", "Recovery code sent to your email. Please check your inbox.",
                "otpRequired", true
            );
            
        } catch (Exception e) {
            log.error("‚ùå Account recovery initiation failed: {}", e.getMessage());
            return Map.of(
                "success", false,
                "error", e.getMessage()
            );
        }
    }

    public Map<String, Object> completeAccountRecovery(AccountRecoveryRequest request) {
        try {
            User user = userRepository.findByUsernameAndEmail(request.getUsername(), request.getEmail())
                .orElseThrow(() -> new RuntimeException("User not found"));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (request.getNewPasswordHash() != null && request.getNewSalt() != null) {
                log.info("üîÑ Updating password for user: {}", request.getUsername());
                user.setPasswordHash(request.getNewPasswordHash());
                user.setSalt(request.getNewSalt());
            } else {
                log.info("üîó Connecting existing user without password change: {}", request.getUsername());
            }
            
            userRepository.save(user);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            String token = jwtService.generateToken(user);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<Map<String, Object>> passwords = user.getPasswordEntries().stream()
                .map(this::convertPasswordToMap)
                .collect(Collectors.toList());
            
            List<Map<String, Object>> notes = user.getNotes().stream()
                .map(this::convertNoteToMap)
                .collect(Collectors.toList());
            
            log.info("‚úÖ Account recovery/connection completed for user: {}", request.getUsername());
            
            return Map.of(
                "success", true,
                "message", request.getNewPasswordHash() != null ? 
                    "Account recovered successfully!" : 
                    "Account connected successfully!",
                "token", token,
                "userId", user.getId(),
                "userData", Map.of(
                    "username", user.getUsername(),
                    "email", user.getEmail()
                ),
                "passwords", passwords,
                "notes", notes
            );
            
        } catch (Exception e) {
            log.error("‚ùå Account recovery/connection failed: {}", e.getMessage());
            return Map.of(
                "success", false,
                "error", e.getMessage()
            );
        }
    }

    public Map<String, Object> createTransferToken(TransferTokenRequest request) {
        try {
            User user = userRepository.findByUsername(request.getUsername())
                .orElseThrow(() -> new RuntimeException("User not found"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if (!user.getPasswordHash().equals(request.getPasswordHash())) {
                throw new RuntimeException("Invalid credentials");
            }
            
            if (!user.isEmailVerified()) {
                throw new RuntimeException("Account not verified");
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å–∞
            String transferToken = generateTransferToken();
            user.setTransferToken(transferToken, 5); // 5 –º–∏–Ω—É—Ç
            
            userRepository.save(user);
            
            log.info("‚úÖ Transfer token created for user: {}", request.getUsername());
            
            return Map.of(
                "success", true,
                "transferToken", transferToken,
                "expiresAt", user.getTransferTokenExpiresAt().toString(),
                "expiresInMinutes", 5
            );
            
        } catch (Exception e) {
            log.error("‚ùå Transfer token creation failed: {}", e.getMessage());
            return Map.of(
                "success", false,
                "error", e.getMessage()
            );
        }
    }

    public Map<String, Object> useTransferToken(String transferToken) {
        try {
            User user = userRepository.findByTransferToken(transferToken)
                .orElseThrow(() -> new RuntimeException("Invalid transfer token"));
            
            if (!user.isTransferTokenValid(transferToken)) {
                throw new RuntimeException("Transfer token expired or invalid");
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
            user.clearTransferToken();
            userRepository.save(user);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            String authToken = jwtService.generateToken(user);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<Map<String, Object>> passwords = user.getPasswordEntries().stream()
                .map(this::convertPasswordToMap)
                .collect(Collectors.toList());
            
            List<Map<String, Object>> notes = user.getNotes().stream()
                .map(this::convertNoteToMap)
                .collect(Collectors.toList());
            
            log.info("‚úÖ Transfer token used successfully for user: {}", user.getUsername());
            
            return Map.of(
                "success", true,
                "message", "Data transfer successful!",
                "token", authToken,
                "userId", user.getId(),
                "userData", Map.of(
                    "username", user.getUsername(),
                    "email", user.getEmail()
                ),
                "passwords", passwords,
                "notes", notes,
                "masterPasswordHash", user.getPasswordHash(),
                "salt", user.getSalt()
            );
            
        } catch (Exception e) {
            log.error("‚ùå Transfer token usage failed: {}", e.getMessage());
            return Map.of(
                "success", false,
                "error", e.getMessage()
            );
        }
    }

    // ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

    private String generateTransferToken() {
        return UUID.randomUUID().toString().replace("-", "").substring(0, 16).toUpperCase();
    }

    private Map<String, Object> convertPasswordToMap(PasswordEntry password) {
        Map<String, Object> map = new HashMap<>();
        map.put("id", password.getId());
        map.put("encryptedTitle", password.getEncryptedTitle());
        map.put("encryptedSite", password.getEncryptedSite());
        map.put("encryptedLogin", password.getEncryptedLogin());
        map.put("encryptedPassword", password.getEncryptedPassword());
        map.put("encryptedType", password.getEncryptedType());
        map.put("createdAt", password.getCreatedAt());
        map.put("updatedAt", password.getUpdatedAt());
        return map;
    }

    private Map<String, Object> convertNoteToMap(SecureNote note) {
        Map<String, Object> map = new HashMap<>();
        map.put("id", note.getId());
        map.put("encryptedTitle", note.getEncryptedTitle());
        map.put("encryptedType", note.getEncryptedType());
        map.put("encryptedData", note.getEncryptedData());
        map.put("createdAt", note.getCreatedAt());
        map.put("updatedAt", note.getUpdatedAt());
        return map;
    }

    /**
     * –û–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email, username –∏ master password
     */
    public Map<String, Object> cloudLogin(String email, String username, String masterPassword) {
        try {
            log.info("üîÑ Starting cloud login for user: {} with email: {}", username, email);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ email
            User user = userRepository.findByUsername(username)
                .or(() -> userRepository.findByEmail(email))
                .orElseThrow(() -> new RuntimeException("User not found with provided credentials"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ username)
            if (!email.equals(user.getEmail())) {
                throw new RuntimeException("Email does not match the account");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            if (!user.isEmailVerified()) {
                throw new RuntimeException("Account not verified. Please complete email verification first.");
            }
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (SHA-256 + Argon2)
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            // –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö–µ—à–æ–º
            
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å masterPassword —Å —Å–æ–ª—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // String tempHash = hashPassword(masterPassword, user.getSalt());
            // if (!user.getPasswordHash().equals(tempHash)) {
            //     throw new RuntimeException("Invalid master password");
            // }
            
            // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            log.info("‚ö†Ô∏è Password validation temporarily skipped for cloud login");
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            String otpCode = emailService.generateOtpCode();
            user.setOtp(otpCode, "CLOUD_LOGIN", 10); // 10 –º–∏–Ω—É—Ç
            
            userRepository.save(user);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP –Ω–∞ email
            emailService.sendCloudLoginOtp(email, username, otpCode);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sessionId –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            String sessionId = UUID.randomUUID().toString();
            
            log.info("‚úÖ Cloud login OTP sent for user: {}", username);
            
            return Map.of(
                "requiresOTP", true,
                "sessionId", sessionId,
                "username", username,
                "message", "OTP code sent to your email. Please verify to complete login."
            );
            
        } catch (Exception e) {
            log.error("‚ùå Cloud login failed: {}", e.getMessage());
            throw new RuntimeException("Cloud login failed: " + e.getMessage());
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
     */
    public Map<String, Object> verifyCloudOTP(String otpCode, String username) {
        try {
            log.info("üîÑ Starting OTP verification for cloud login, user: {}", username);
            
            User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º OTP –∫–æ–¥
            if (!user.isOtpValid(otpCode, "CLOUD_LOGIN")) {
                throw new RuntimeException("Invalid or expired OTP code");
            }
            
            // –û—á–∏—â–∞–µ–º OTP –∫–æ–¥
            user.clearOtp();
            userRepository.save(user);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            String authToken = jwtService.generateToken(user);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            List<Map<String, Object>> passwords = user.getPasswordEntries().stream()
                .map(this::convertPasswordToMap)
                .collect(Collectors.toList());
            
            List<Map<String, Object>> notes = user.getNotes().stream()
                .map(this::convertNoteToMap)
                .collect(Collectors.toList());
            
            log.info("‚úÖ Cloud OTP verification successful for user: {}", username);
            
            return Map.of(
                "success", true,
                "message", "Cloud login successful",
                "token", authToken,
                "userId", user.getId(),
                "username", user.getUsername(),
                "email", user.getEmail(),
                "passwordHash", user.getPasswordHash(),
                "salt", user.getSalt(),
                "passwords", passwords,
                "notes", notes
            );
            
        } catch (Exception e) {
            log.error("‚ùå Cloud OTP verification failed: {}", e.getMessage());
            throw new RuntimeException("OTP verification failed: " + e.getMessage());
        }
    }

    // ‚úÖ –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
    public EmailService getEmailService() {
        return emailService;
    }
} 