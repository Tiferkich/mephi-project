package by.sakhdanil.managmentserver.controller;

import by.sakhdanil.managmentserver.dto.note.NoteResponse;
import by.sakhdanil.managmentserver.dto.password.PasswordResponse;
import by.sakhdanil.managmentserver.entity.User;
import by.sakhdanil.managmentserver.service.PasswordEntryService;
import by.sakhdanil.managmentserver.service.SecureNoteService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/backup")
@RequiredArgsConstructor
@Tag(name = "üíæ Backup", description = "–û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
public class BackupController {
    
    private final SecureNoteService noteService;
    private final PasswordEntryService passwordService;
    
    @GetMapping("/export")
    @Operation(
        summary = "–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = """
            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ—Ç–∫–∏ –∏ –ø–∞—Ä–æ–ª–∏) –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            
            **–í–∞–∂–Ω–æ**: 
            - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
            - –≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            - –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    value = """
                        {
                          "notes": [
                            {
                              "id": 1,
                              "encryptedTitle": "U2FsdGVkX1+vupppZksvRf5pq5g5XjFRIipRkwB0K1Y=",
                              "encryptedData": "AES_encrypted_note_content_1",
                              "createdAt": "2024-01-15T10:30:00.000Z",
                              "updatedAt": "2024-01-15T10:30:00.000Z"
                            }
                          ],
                          "passwords": [
                            {
                              "id": 1,
                              "encryptedTitle": "U2FsdGVkX1+vupppZksvRf5pq5g5XjFRIipRkwB0K2A=",
                              "encryptedData": "AES_encrypted_password_data_1",
                              "createdAt": "2024-01-15T10:30:00.000Z",
                              "updatedAt": "2024-01-15T10:30:00.000Z"
                            }
                          ],
                          "exportedAt": "2024-01-15T12:00:00.000Z",
                          "userId": "123e4567-e89b-12d3-a456-426614174000"
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<Map<String, Object>> exportData(@AuthenticationPrincipal User user) {
        List<NoteResponse> notes = noteService.getAllNotes(user);
        List<PasswordResponse> passwords = passwordService.getAllPasswords(user);
        
        Map<String, Object> backup = new HashMap<>();
        backup.put("notes", notes);
        backup.put("passwords", passwords);
        backup.put("exportedAt", java.time.Instant.now());
        backup.put("userId", user.getId());
        
        return ResponseEntity.ok(backup);
    }
    
    @PostMapping("/import")
    @Operation(
        summary = "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        description = """
            –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.
            
            **–°—Ç–∞—Ç—É—Å**: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            
            **–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å**:
            - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            - –û–ø—Ü–∏–∏ —Å–ª–∏—è–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            **–í–∞–∂–Ω–æ**: 
            - –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            - –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ó–∞–≥–ª—É—à–∫–∞ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–û—Ç–≤–µ—Ç –∑–∞–≥–ª—É—à–∫–∏",
                    value = """
                        {
                          "message": "Import functionality will be implemented based on specific requirements",
                          "status": "placeholder"
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<Map<String, String>> importData(
            @RequestBody Map<String, Object> backupData,
            @AuthenticationPrincipal User user) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        Map<String, String> response = new HashMap<>();
        response.put("message", "Import functionality will be implemented based on specific requirements");
        response.put("status", "placeholder");
        return ResponseEntity.ok(response);
    }
} 