package by.sakhdanil.managmentserver.controller;

import by.sakhdanil.managmentserver.dto.note.NoteRequest;
import by.sakhdanil.managmentserver.dto.note.NoteResponse;
import by.sakhdanil.managmentserver.entity.User;
import by.sakhdanil.managmentserver.service.SecureNoteService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/notes")
@RequiredArgsConstructor
@Tag(name = "üìù Notes", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏")
public class NoteController {
    
    private final SecureNoteService noteService;
    
    @GetMapping
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
            - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è
            - –°–µ—Ä–≤–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–º–µ—Ç–æ–∫
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class),
                examples = @ExampleObject(
                    name = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫",
                    value = """
                        [
                          {
                            "id": 1,
                            "encryptedTitle": "U2FsdGVkX1+vupppZksvRf5pq5g5XjFRIipRkwB0K1Y=",
                            "encryptedData": "AES_encrypted_note_content_1",
                            "createdAt": "2024-01-15T10:30:00.000Z",
                            "updatedAt": "2024-01-15T10:30:00.000Z"
                          },
                          {
                            "id": 2,
                            "encryptedTitle": "U2FsdGVkX1+vupppZksvRf5pq5g5XjFRIipRkwB0K2A=",
                            "encryptedData": "AES_encrypted_note_content_2",
                            "createdAt": "2024-01-15T11:00:00.000Z",
                            "updatedAt": "2024-01-15T11:00:00.000Z"
                          }
                        ]
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω"
        )
    })
    public ResponseEntity<List<NoteResponse>> getAllNotes(@AuthenticationPrincipal User user) {
        List<NoteResponse> notes = noteService.getAllNotes(user);
        return ResponseEntity.ok(notes);
    }
    
    @PostMapping
    @Operation(
        summary = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É",
        description = """
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            - –°–µ—Ä–≤–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class),
                examples = @ExampleObject(
                    name = "–°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞",
                    value = """
                        {
                          "id": 1,
                          "encryptedTitle": "U2FsdGVkX1+vupppZksvRf5pq5g5XjFRIipRkwB0K1Y=",
                          "encryptedData": "AES_encrypted_note_content",
                          "createdAt": "2024-01-15T10:30:00.000Z",
                          "updatedAt": "2024-01-15T10:30:00.000Z"
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    })
    public ResponseEntity<NoteResponse> createNote(
            @Valid @RequestBody NoteRequest request,
            @AuthenticationPrincipal User user) {
        NoteResponse note = noteService.createNote(request, user);
        return ResponseEntity.ok(note);
    }
    
    @PutMapping("/{id}")
    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        description = """
            –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏
            - –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            - ID –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = NoteResponse.class)
            )
        ),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    })
    public ResponseEntity<NoteResponse> updateNote(
            @PathVariable Long id,
            @Valid @RequestBody NoteRequest request,
            @AuthenticationPrincipal User user) {
        NoteResponse note = noteService.updateNote(id, request, user);
        return ResponseEntity.ok(note);
    }
    
    @DeleteMapping("/{id}")
    @Operation(
        summary = "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        description = """
            –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            **–í–∞–∂–Ω–æ**: 
            - –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏
            - –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞
            - ID –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    })
    public ResponseEntity<Void> deleteNote(
            @PathVariable Long id,
            @AuthenticationPrincipal User user) {
        noteService.deleteNote(id, user);
        return ResponseEntity.noContent().build();
    }
} 