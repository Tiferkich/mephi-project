package by.sakhdanil.managmentserver.controller;

import by.sakhdanil.managmentserver.dto.auth.*;
import by.sakhdanil.managmentserver.dto.user.JwtResponse;
import by.sakhdanil.managmentserver.dto.user.LoginRequest;
import by.sakhdanil.managmentserver.dto.user.RegisterRequest;
import by.sakhdanil.managmentserver.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
@Tag(name = "üîê Authentication", description = "–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
public class AuthController {
    
    private final UserService userService;
    
    @PostMapping("/register")
    @Operation(
        summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = """
            –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
            
            **–í–∞–∂–Ω–æ**: 
            - –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (SHA-256)
            - –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é Argon2
            - –°–µ—Ä–≤–µ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
            
            **–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:**
            1. `masterPasswordHash = SHA256(masterPassword)`
            2. `salt = generateRandomSalt()`
            3. `passwordHash = Argon2(masterPasswordHash + salt)`
            4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å `{username, salt, passwordHash}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            """,
        requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            required = true,
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = RegisterRequest.class),
                examples = @ExampleObject(
                    name = "–ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    value = """
                        {
                          "username": "john_doe",
                          "salt": "a1b2c3d4e5f6",
                          "passwordHash": "$argon2id$v=19$m=4096,t=3,p=1$a1b2c3d4e5f6$hash_result"
                        }
                        """
                )
            )
        )
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = JwtResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "userId": "123e4567-e89b-12d3-a456-426614174000",
                          "username": "john_doe"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 400,
                          "error": "Bad Request",
                          "message": "Username must be between 3 and 50 characters",
                          "path": "/auth/register"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "409",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 409,
                          "error": "Conflict",
                          "message": "Username already exists",
                          "path": "/auth/register"
                        }
                        """
                )
            )
        )
    })
    public ResponseEntity<JwtResponse> register(@Valid @RequestBody RegisterRequest request) {
        JwtResponse response = userService.register(request);
        return ResponseEntity.ok(response);
    }
    
    @PostMapping("/login")
    @Operation(
        summary = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
        description = """
            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω.
            
            **–í–∞–∂–Ω–æ**: 
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            - `passwordHash = Argon2(SHA256(masterPassword) + salt)`
            - –°–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            
            **–ü–æ–ª—É—á–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `Authorization: Bearer <token>` 
            –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º.
            """,
        requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞",
            required = true,
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = LoginRequest.class),
                examples = @ExampleObject(
                    name = "–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞",
                    value = """
                        {
                          "username": "john_doe",
                          "passwordHash": "$argon2id$v=19$m=4096,t=3,p=1$a1b2c3d4e5f6$hash_result"
                        }
                        """
                )
            )
        )
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = JwtResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "userId": "123e4567-e89b-12d3-a456-426614174000",
                          "username": "john_doe"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 400,
                          "error": "Bad Request",
                          "message": "Username is required",
                          "path": "/auth/login"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 401,
                          "error": "Unauthorized",
                          "message": "Invalid credentials",
                          "path": "/auth/login"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 404,
                          "error": "Not Found",
                          "message": "User not found",
                          "path": "/auth/login"
                        }
                        """
                )
            )
        )
    })
    public ResponseEntity<JwtResponse> login(@Valid @RequestBody LoginRequest request) {
        JwtResponse response = userService.login(request);
        return ResponseEntity.ok(response);
    }

    // ‚úÖ –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø

    @PostMapping("/sync-setup")
    @Operation(
        summary = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å email –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ OTP –∫–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    public ResponseEntity<Map<String, Object>> setupSync(@Valid @RequestBody SyncSetupRequest request) {
        System.out.println("üî• REMOTE AuthController.setupSync –≤—ã–∑–≤–∞–Ω!");
        System.out.println("üî• REMOTE Request data: username=" + request.getUsername() + ", email=" + request.getEmail());
        
        try {
            Map<String, Object> response = userService.setupSync(request);
            System.out.println("üî• REMOTE setupSync —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: " + response);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.out.println("üî• REMOTE setupSync –æ—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @PostMapping("/verify-otp")
    @Operation(
        summary = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ OTP –∫–æ–¥–∞",
        description = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∫–æ–¥–∞ –¥–ª—è email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    )
    public ResponseEntity<Map<String, Object>> verifyOtp(@Valid @RequestBody OtpVerificationRequest request) {
        Map<String, Object> response = userService.verifyOtp(request);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/initiate-recovery")
    @Operation(
        summary = "–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞",
        description = "–û—Ç–ø—Ä–∞–≤–∫–∞ OTP –∫–æ–¥–∞ –Ω–∞ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"
    )
    public ResponseEntity<Map<String, Object>> initiateRecovery(@RequestBody Map<String, String> request) {
        String username = request.get("username");
        String email = request.get("email");
        Map<String, Object> response = userService.initiateAccountRecovery(username, email);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/complete-recovery")
    @Operation(
        summary = "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞",
        description = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OTP"
    )
    public ResponseEntity<Map<String, Object>> completeRecovery(@Valid @RequestBody AccountRecoveryRequest request) {
        Map<String, Object> response = userService.completeAccountRecovery(request);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/create-transfer-token")
    @Operation(
        summary = "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞",
        description = "–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç)"
    )
    public ResponseEntity<Map<String, Object>> createTransferToken(@Valid @RequestBody TransferTokenRequest request) {
        Map<String, Object> response = userService.createTransferToken(request);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/use-transfer-token")
    @Operation(
        summary = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞",
        description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–º—É —Ç–æ–∫–µ–Ω—É –ø–µ—Ä–µ–Ω–æ—Å–∞"
    )
    public ResponseEntity<Map<String, Object>> useTransferToken(@RequestBody Map<String, String> request) {
        String transferToken = request.get("transferToken");
        Map<String, Object> response = userService.useTransferToken(transferToken);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/health")
    @Operation(
        summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
        description = "–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    public ResponseEntity<Map<String, String>> health() {
        return ResponseEntity.ok(Map.of(
            "status", "UP",
            "timestamp", java.time.Instant.now().toString()
        ));
    }

    @PostMapping("/test-email")
    @Operation(
        summary = "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email",
        description = "–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email"
    )
    public ResponseEntity<Map<String, Object>> testEmail(@RequestBody Map<String, String> request) {
        try {
            String testEmail = request.get("email");
            if (testEmail == null || testEmail.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Email is required"
                ));
            }
            
            String otpCode = userService.getEmailService().generateOtpCode();
            userService.getEmailService().sendSyncSetupOtp(testEmail, "Test User", otpCode);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Test email sent successfully!",
                "email", testEmail,
                "otpCode", otpCode
            ));
        } catch (Exception e) {
            return ResponseEntity.ok(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/cloud-login")
    @Operation(
        summary = "–û–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email, username –∏ master password",
        description = """
            –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email, username –∏ master password.
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç OTP –∫–æ–¥ –Ω–∞ email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç OTP –∫–æ–¥ –Ω–∞ email
            3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç sessionId –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
            **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
            - –û–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ JWT —Ç–æ–∫–µ–Ω—É
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    value = """
                        {
                          "requiresOTP": true,
                          "sessionId": "session_12345",
                          "username": "john_doe",
                          "message": "OTP code sent to your email"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    })
    public ResponseEntity<Map<String, Object>> cloudLogin(@RequestBody Map<String, String> request) {
        String email = request.get("email");
        String username = request.get("username");
        String masterPassword = request.get("masterPassword");
        
        Map<String, Object> response = userService.cloudLogin(email, username, masterPassword);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/verify-cloud-otp")
    @Operation(
        summary = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞",
        description = """
            –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±–ª–∞—á–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é OTP –∫–æ–¥–∞.
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ JWT —Ç–æ–∫–µ–Ω.
            
            **–ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç OTP –∫–æ–¥
            2. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            3. –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–æ–ª–∏ –∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
            **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
            - JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - –í—Å–µ –ø–∞—Ä–æ–ª–∏ –∏ –∑–∞–º–µ—Ç–∫–∏
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "OTP –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "userId": "123e4567-e89b-12d3-a456-426614174000",
                          "username": "john_doe",
                          "email": "john@example.com",
                          "passwordHash": "$argon2id$v=19$m=4096,t=3,p=1$...",
                          "salt": "a1b2c3d4e5f6",
                          "passwords": [...],
                          "notes": [...]
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–π OTP –∫–æ–¥"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞"
        )
    })
    public ResponseEntity<Map<String, Object>> verifyCloudOTP(@RequestBody Map<String, String> request) {
        String otpCode = request.get("otpCode");
        String username = request.get("username");
        
        Map<String, Object> response = userService.verifyCloudOTP(otpCode, username);
        return ResponseEntity.ok(response);
    }
}
