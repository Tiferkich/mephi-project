package by.sakhdanil.managmentserver.controller;

import by.sakhdanil.managmentserver.dto.user.JwtResponse;
import by.sakhdanil.managmentserver.dto.user.LoginRequest;
import by.sakhdanil.managmentserver.dto.user.RegisterRequest;
import by.sakhdanil.managmentserver.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Tag(name = "üîê Authentication", description = "–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
public class AuthController {
    
    private final UserService userService;
    
    @PostMapping("/register")
    @Operation(
        summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = """
            –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
            
            **–í–∞–∂–Ω–æ**: 
            - –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (SHA-256)
            - –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é Argon2
            - –°–µ—Ä–≤–µ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
            
            **–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:**
            1. `masterPasswordHash = SHA256(masterPassword)`
            2. `salt = generateRandomSalt()`
            3. `passwordHash = Argon2(masterPasswordHash + salt)`
            4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å `{username, salt, passwordHash}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            """,
        requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            required = true,
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = RegisterRequest.class),
                examples = @ExampleObject(
                    name = "–ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    value = """
                        {
                          "username": "john_doe",
                          "salt": "a1b2c3d4e5f6",
                          "passwordHash": "$argon2id$v=19$m=4096,t=3,p=1$a1b2c3d4e5f6$hash_result"
                        }
                        """
                )
            )
        )
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = JwtResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "userId": "123e4567-e89b-12d3-a456-426614174000",
                          "username": "john_doe"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 400,
                          "error": "Bad Request",
                          "message": "Username must be between 3 and 50 characters",
                          "path": "/api/auth/register"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "409",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 409,
                          "error": "Conflict",
                          "message": "Username already exists",
                          "path": "/api/auth/register"
                        }
                        """
                )
            )
        )
    })
    public ResponseEntity<JwtResponse> register(@Valid @RequestBody RegisterRequest request) {
        JwtResponse response = userService.register(request);
        return ResponseEntity.ok(response);
    }
    
    @PostMapping("/login")
    @Operation(
        summary = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
        description = """
            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω.
            
            **–í–∞–∂–Ω–æ**: 
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            - `passwordHash = Argon2(SHA256(masterPassword) + salt)`
            - –°–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            
            **–ü–æ–ª—É—á–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `Authorization: Bearer <token>` 
            –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º.
            """,
        requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞",
            required = true,
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = LoginRequest.class),
                examples = @ExampleObject(
                    name = "–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞",
                    value = """
                        {
                          "username": "john_doe",
                          "passwordHash": "$argon2id$v=19$m=4096,t=3,p=1$a1b2c3d4e5f6$hash_result"
                        }
                        """
                )
            )
        )
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = JwtResponse.class),
                examples = @ExampleObject(
                    name = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                    value = """
                        {
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "userId": "123e4567-e89b-12d3-a456-426614174000",
                          "username": "john_doe"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 400,
                          "error": "Bad Request",
                          "message": "Username is required",
                          "path": "/api/auth/login"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 401,
                          "error": "Unauthorized",
                          "message": "Invalid credentials",
                          "path": "/api/auth/login"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                examples = @ExampleObject(
                    name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    value = """
                        {
                          "timestamp": "2024-01-15T10:30:00.000Z",
                          "status": 404,
                          "error": "Not Found",
                          "message": "User not found",
                          "path": "/api/auth/login"
                        }
                        """
                )
            )
        )
    })
    public ResponseEntity<JwtResponse> login(@Valid @RequestBody LoginRequest request) {
        JwtResponse response = userService.login(request);
        return ResponseEntity.ok(response);
    }
}
