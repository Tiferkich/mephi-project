#!/usr/bin/env python3
import os
import sys
import time
from colorama import Fore, Style, init

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('/app')

from attacks import http_flood, post_flood, slowloris, smart_attack
from utils.metrics import metrics_collector
from utils.visualizer import visualizer
from utils.test_data import test_data_generator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

class DDoSLabMenu:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ DDoS-–∞—Ç–∞–∫"""
    
    def __init__(self):
        self.target_url = os.getenv('TARGET_URL', 'http://localhost:8080')
        self.results_history = []
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        os.makedirs('metrics', exist_ok=True)
        os.makedirs('graphs', exist_ok=True)
    
    def print_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
        banner = f"""
{Fore.RED}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
{Fore.RED}‚ïë                                                              ‚ïë
{Fore.RED}‚ïë              üî• –õ–ê–ë–û–†–ê–¢–û–†–ù–´–ô –°–¢–ï–ù–î DDOS-–ê–¢–ê–ö üî•              ‚ïë
{Fore.RED}‚ïë                                                              ‚ïë
{Fore.RED}‚ïë        –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∏ –∏–∑—É—á–µ–Ω–∏—è DDoS-–∞—Ç–∞–∫             ‚ïë
{Fore.RED}‚ïë           –Ω–∞ –±–∞–∑–µ Python –∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤               ‚ïë
{Fore.RED}‚ïë                                                              ‚ïë
{Fore.RED}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

{Fore.YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!
{Fore.YELLOW}‚ö†Ô∏è  –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏ –Ω–∞ —á—É–∂–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ó–ê–ü–†–ï–©–ï–ù–´!

{Fore.CYAN}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞—Ç–∞–∫:
{Fore.GREEN}  1. HTTP Flood (GET)    - –ó–∞–≤–∞–ª–∏–≤–∞–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞–º–∏
{Fore.MAGENTA}  2. POST Flood          - –ê—Ç–∞–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –¥–∞–Ω–Ω—ã–º–∏  
{Fore.RED}  3. Slowloris           - –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
{Fore.LIGHTMAGENTA_EX}  4. Smart Attack        - –£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ç–∞–∫–∞

{Fore.CYAN}üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
{Fore.BLUE}  5. –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç       - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
{Fore.BLUE}  6. –ò—Å—Ç–æ—Ä–∏—è –∞—Ç–∞–∫        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
{Fore.BLUE}  7. –ù–∞—Å—Ç—Ä–æ–π–∫–∏           - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

{Fore.WHITE}–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {Fore.YELLOW}{self.target_url}
"""
        print(banner)
    
    def get_user_input(self, prompt: str, default=None, input_type=str):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        while True:
            try:
                if default is not None:
                    user_input = input(f"{prompt} [{default}]: ").strip()
                    if not user_input:
                        return default
                else:
                    user_input = input(f"{prompt}: ").strip()
                
                if input_type == int:
                    return int(user_input)
                elif input_type == float:
                    return float(user_input)
                else:
                    return user_input
            except (ValueError, KeyboardInterrupt):
                print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                if input_type == int:
                    print(f"{Fore.YELLOW}üí° –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
                elif input_type == float:
                    print(f"{Fore.YELLOW}üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π")
    
    def run_http_flood(self):
        """–ó–∞–ø—É—Å–∫ HTTP Flood –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.CYAN}üåä –ù–ê–°–¢–†–û–ô–ö–ê HTTP FLOOD –ê–¢–ê–ö–ò")
        print("="*50)
        
        threads = self.get_user_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤", 10, int)
        requests_per_thread = self.get_user_input("–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫", 100, int)
        
        print(f"\n{Fore.YELLOW}üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏:")
        print(f"  –¶–µ–ª—å: {self.target_url}")
        print(f"  –ü–æ—Ç–æ–∫–æ–≤: {threads}")
        print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫: {requests_per_thread}")
        print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {threads * requests_per_thread}")
        
        confirm = self.get_user_input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ç–∞–∫—É? (y/n)", "y")
        if confirm.lower() != 'y':
            print(f"{Fore.YELLOW}‚ùå –ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        result_file = http_flood.run(self.target_url, threads, requests_per_thread)
        if result_file:
            self.results_history.append({
                'type': 'HTTP_FLOOD',
                'file': result_file,
                'timestamp': time.time(),
                'params': {'threads': threads, 'requests_per_thread': requests_per_thread}
            })
            print(f"\n{Fore.GREEN}‚úÖ HTTP Flood –∞—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result_file}")
    
    def run_post_flood(self):
        """–ó–∞–ø—É—Å–∫ POST Flood –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.MAGENTA}üìÆ –ù–ê–°–¢–†–û–ô–ö–ê POST FLOOD –ê–¢–ê–ö–ò")
        print("="*50)
        
        threads = self.get_user_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤", 8, int)
        requests_per_thread = self.get_user_input("–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫", 50, int)
        
        print(f"\n{Fore.YELLOW}üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏:")
        print(f"  –¶–µ–ª—å: {self.target_url}")
        print(f"  –ü–æ—Ç–æ–∫–æ–≤: {threads}")
        print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫: {requests_per_thread}")
        print(f"  –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã: /auth/register, /auth/login, /api/passwords, /api/notes...")
        
        confirm = self.get_user_input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ç–∞–∫—É? (y/n)", "y")
        if confirm.lower() != 'y':
            print(f"{Fore.YELLOW}‚ùå –ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        result_file = post_flood.run(self.target_url, threads, requests_per_thread)
        if result_file:
            self.results_history.append({
                'type': 'POST_FLOOD',
                'file': result_file,
                'timestamp': time.time(),
                'params': {'threads': threads, 'requests_per_thread': requests_per_thread}
            })
            print(f"\n{Fore.GREEN}‚úÖ POST Flood –∞—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result_file}")
    
    def run_slowloris(self):
        """–ó–∞–ø—É—Å–∫ Slowloris –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.RED}üêå –ù–ê–°–¢–†–û–ô–ö–ê SLOWLORIS –ê–¢–ê–ö–ò")
        print("="*50)
        
        connections = self.get_user_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", 200, int)
        duration = self.get_user_input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥)", 300, int)
        
        print(f"\n{Fore.YELLOW}üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏:")
        print(f"  –¶–µ–ª—å: {self.target_url}")
        print(f"  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {connections}")
        print(f"  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        print(f"  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        
        confirm = self.get_user_input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ç–∞–∫—É? (y/n)", "y")
        if confirm.lower() != 'y':
            print(f"{Fore.YELLOW}‚ùå –ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        result_file = slowloris.run(self.target_url, connections, duration)
        if result_file:
            self.results_history.append({
                'type': 'SLOWLORIS',
                'file': result_file,
                'timestamp': time.time(),
                'params': {'connections': connections, 'duration': duration}
            })
            print(f"\n{Fore.GREEN}‚úÖ Slowloris –∞—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result_file}")
    
    def run_smart_attack(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–π –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.LIGHTMAGENTA_EX}üß† –ù–ê–°–¢–†–û–ô–ö–ê –£–ú–ù–û–ô –ê–î–ê–ü–¢–ò–í–ù–û–ô –ê–¢–ê–ö–ò")
        print("="*50)
        
        threads = self.get_user_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤", 15, int)
        duration = self.get_user_input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥)", 300, int)
        
        print(f"\n{Fore.YELLOW}üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏:")
        print(f"  –¶–µ–ª—å: {self.target_url}")
        print(f"  –ü–æ—Ç–æ–∫–æ–≤: {threads}")
        print(f"  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        print(f"  –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: HTTP Flood + POST Flood + Slowloris + Hybrid")
        print(f"  –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–∏")
        
        confirm = self.get_user_input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ç–∞–∫—É? (y/n)", "y")
        if confirm.lower() != 'y':
            print(f"{Fore.YELLOW}‚ùå –ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        result_file = smart_attack.run(self.target_url, threads, duration)
        if result_file:
            self.results_history.append({
                'type': 'SMART_ATTACK',
                'file': result_file,
                'timestamp': time.time(),
                'params': {'threads': threads, 'duration': duration}
            })
            print(f"\n{Fore.GREEN}‚úÖ –£–º–Ω–∞—è –∞—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result_file}")
    
    def create_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        print(f"\n{Fore.BLUE}üìä –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê")
        print("="*50)
        
        if not self.results_history:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            print(f"{Fore.YELLOW}üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ç–∞–∫")
            return
        
        print(f"{Fore.CYAN}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, result in enumerate(self.results_history):
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(result['timestamp']))
            print(f"  {i+1}. {result['type']} - {timestamp} - {result['file']}")
        
        if len(self.results_history) == 1:
            choice = 1
        else:
            choice = self.get_user_input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ (1-{len(self.results_history)})", 1, int)
            if choice < 1 or choice > len(self.results_history):
                print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
        
        result = self.results_history[choice - 1]
        
        print(f"\n{Fore.YELLOW}üé® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è {result['type']}...")
        visualizer.create_attack_report(result['file'], result['type'])
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(self.results_history) > 1:
            create_comparison = self.get_user_input("–°–æ–∑–¥–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—Ç–∞–∫? (y/n)", "n")
            if create_comparison.lower() == 'y':
                files = [r['file'] for r in self.results_history if os.path.exists(r['file'])]
                names = [r['type'] for r in self.results_history if os.path.exists(r['file'])]
                if files:
                    visualizer.plot_attack_comparison(files, names)
    
    def view_history(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞—Ç–∞–∫"""
        print(f"\n{Fore.BLUE}üìö –ò–°–¢–û–†–ò–Ø –ê–¢–ê–ö")
        print("="*50)
        
        if not self.results_history:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        for i, result in enumerate(self.results_history):
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(result['timestamp']))
            print(f"\n{Fore.CYAN}üìç –ê—Ç–∞–∫–∞ #{i+1}")
            print(f"  –¢–∏–ø: {result['type']}")
            print(f"  –í—Ä–µ–º—è: {timestamp}")
            print(f"  –§–∞–π–ª: {result['file']}")
            print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {result['params']}")
            
            if os.path.exists(result['file']):
                print(f"  {Fore.GREEN}‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  {Fore.RED}‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print(f"\n{Fore.BLUE}‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò")
        print("="*50)
        
        print(f"–¢–µ–∫—É—â–∏–π URL: {Fore.YELLOW}{self.target_url}")
        
        new_url = self.get_user_input("–ù–æ–≤—ã–π URL —Ü–µ–ª–∏ (–∏–ª–∏ Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ)", self.target_url)
        if new_url != self.target_url:
            self.target_url = new_url
            print(f"{Fore.GREEN}‚úÖ URL –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.target_url}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"\n{Fore.CYAN}üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print(f"1. –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞—Ç–∞–∫")
        print(f"2. –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –º–µ—Ç—Ä–∏–∫")
        print(f"3. –û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
        print(f"4. –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ü–µ–ª—å—é")
        
        action = self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4 –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)", "")
        
        if action == "1":
            self.results_history.clear()
            print(f"{Fore.GREEN}‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        elif action == "2":
            import glob
            for file in glob.glob("metrics/*.csv") + glob.glob("metrics/*.json"):
                try:
                    os.remove(file)
                    print(f"{Fore.GREEN}üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {file}")
                except:
                    pass
        elif action == "3":
            import glob
            for file in glob.glob("graphs/*.png"):
                try:
                    os.remove(file)
                    print(f"{Fore.GREEN}üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {file}")
                except:
                    pass
        elif action == "4":
            self.test_connection()
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª—å—é"""
        print(f"\n{Fore.YELLOW}üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {self.target_url}...")
        
        try:
            import requests
            start_time = time.time()
            response = requests.get(f"{self.target_url}/auth/health", timeout=5)
            response_time = time.time() - start_time
            
            print(f"{Fore.GREEN}‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.3f}—Å")
            print(f"  –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            
            server = response.headers.get('Server', 'Unknown')
            print(f"  –°–µ—Ä–≤–µ—Ä: {server}")
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        while True:
            try:
                self.print_banner()
                
                choice = self.get_user_input(f"\n{Fore.WHITE}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-7 –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞)", "1")
                
                if choice == "0":
                    print(f"\n{Fore.CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == "1":
                    self.run_http_flood()
                elif choice == "2":
                    self.run_post_flood()
                elif choice == "3":
                    self.run_slowloris()
                elif choice == "4":
                    self.run_smart_attack()
                elif choice == "5":
                    self.create_report()
                elif choice == "6":
                    self.view_history()
                elif choice == "7":
                    self.settings()
                else:
                    print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                if choice != "0":
                    input(f"\n{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            except KeyboardInterrupt:
                print(f"\n\n{Fore.YELLOW}‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                confirm_exit = self.get_user_input("–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏? (y/n)", "n")
                if confirm_exit.lower() == 'y':
                    break
            except Exception as e:
                print(f"\n{Fore.RED}üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                print(f"{Fore.YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é...")
                time.sleep(2)


if __name__ == "__main__":
    print(f"{Fore.GREEN}üöÄ –ó–∞–ø—É—Å–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ DDoS-–∞—Ç–∞–∫...")
    menu = DDoSLabMenu()
    menu.run() 