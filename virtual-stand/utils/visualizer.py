import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from datetime import datetime
from typing import List, Dict, Any


class AttackVisualizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç–∞–∫"""
    
    def __init__(self, output_dir: str = "graphs"):
        self.output_dir = output_dir
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
    
    def plot_response_times(self, csv_file: str, save_name: str = None):
        """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            df = pd.read_csv(csv_file)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            plt.figure(figsize=(12, 6))
            plt.plot(df['timestamp'], df['response_time'], marker='o', markersize=2, alpha=0.7)
            plt.title('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏', fontsize=14, fontweight='bold')
            plt.xlabel('–í—Ä–µ–º—è')
            plt.ylabel('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)')
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            if save_name is None:
                save_name = f"response_time_ts_{int(datetime.now().timestamp())}.png"
            
            save_path = os.path.join(self.output_dir, save_name)
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    def plot_response_time_histogram(self, csv_file: str, save_name: str = None):
        """–°—Ç—Ä–æ–∏—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        try:
            df = pd.read_csv(csv_file)
            
            plt.figure(figsize=(10, 6))
            plt.hist(df['response_time'], bins=30, color='skyblue', alpha=0.7, edgecolor='black')
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞', fontsize=14, fontweight='bold')
            plt.xlabel('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
            plt.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            mean_time = df['response_time'].mean()
            plt.axvline(mean_time, color='red', linestyle='--', 
                       label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_time:.3f}—Å')
            plt.legend()
            plt.tight_layout()
            
            if save_name is None:
                save_name = f"response_time_hist_{int(datetime.now().timestamp())}.png"
            
            save_path = os.path.join(self.output_dir, save_name)
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {e}")
    
    def plot_status_codes(self, csv_file: str, save_name: str = None):
        """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤"""
        try:
            df = pd.read_csv(csv_file)
            status_counts = df['status_code'].value_counts().sort_index()
            
            plt.figure(figsize=(10, 6))
            bars = plt.bar(status_counts.index.astype(str), status_counts.values, 
                          color=['green' if int(x) < 400 else 'red' for x in status_counts.index])
            
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤', fontsize=14, fontweight='bold')
            plt.xlabel('–°—Ç–∞—Ç—É—Å-–∫–æ–¥')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
            plt.grid(True, alpha=0.3, axis='y')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height,
                        f'{int(height)}',
                        ha='center', va='bottom')
            
            plt.tight_layout()
            
            if save_name is None:
                save_name = f"status_codes_{int(datetime.now().timestamp())}.png"
            
            save_path = os.path.join(self.output_dir, save_name)
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤: {e}")
    
    def plot_attack_comparison(self, csv_files: List[str], attack_names: List[str], save_name: str = None):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫"""
        try:
            plt.figure(figsize=(15, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º –∞—Ç–∞–∫
            plt.subplot(2, 2, 1)
            all_data = []
            for i, csv_file in enumerate(csv_files):
                if os.path.exists(csv_file):
                    df = pd.read_csv(csv_file)
                    df['attack_name'] = attack_names[i]
                    all_data.append(df)
            
            if all_data:
                combined_df = pd.concat(all_data, ignore_index=True)
                sns.boxplot(data=combined_df, x='attack_name', y='response_time')
                plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º –∞—Ç–∞–∫')
                plt.xticks(rotation=45)
                
                # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º
                plt.subplot(2, 2, 2)
                request_counts = combined_df['attack_name'].value_counts()
                plt.bar(request_counts.index, request_counts.values)
                plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∞—Ç–∞–∫')
                plt.xticks(rotation=45)
                
                # –ì—Ä–∞—Ñ–∏–∫ 3: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫
                plt.subplot(2, 2, 3)
                success_rates = []
                for attack in attack_names:
                    attack_data = combined_df[combined_df['attack_name'] == attack]
                    if not attack_data.empty:
                        success_rate = len(attack_data[attack_data['status_code'] < 400]) / len(attack_data) * 100
                        success_rates.append(success_rate)
                    else:
                        success_rates.append(0)
                
                plt.bar(attack_names, success_rates)
                plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∞—Ç–∞–∫')
                plt.ylabel('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)')
                plt.xticks(rotation=45)
                
                # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
                plt.subplot(2, 2, 4)
                avg_response_times = combined_df.groupby('attack_name')['response_time'].mean()
                plt.bar(avg_response_times.index, avg_response_times.values)
                plt.title('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º –∞—Ç–∞–∫')
                plt.ylabel('–í—Ä–µ–º—è (—Å–µ–∫)')
                plt.xticks(rotation=45)
            
            plt.tight_layout()
            
            if save_name is None:
                save_name = f"attack_comparison_{int(datetime.now().timestamp())}.png"
            
            save_path = os.path.join(self.output_dir, save_name)
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    
    def create_attack_report(self, csv_file: str, attack_type: str):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞—Ç–∞–∫–µ"""
        try:
            timestamp = int(datetime.now().timestamp())
            report_prefix = f"{attack_type}_{timestamp}"
            
            print(f"\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏ '{attack_type}'...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self.plot_response_times(csv_file, f"{report_prefix}_response_time.png")
            self.plot_response_time_histogram(csv_file, f"{report_prefix}_histogram.png")
            self.plot_status_codes(csv_file, f"{report_prefix}_status_codes.png")
            
            print(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –∞—Ç–∞–∫–µ '{attack_type}' —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ {self.output_dir}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
visualizer = AttackVisualizer() 